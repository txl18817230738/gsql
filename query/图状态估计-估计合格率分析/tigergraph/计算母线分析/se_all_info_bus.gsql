create query se_all_info_bus(string companyID="113715890758877224", bool return_all=true) for graph gsql_EMS {
	TYPEDEF TUPLE <string bus_name, string sub, string sub_id, double volt, double desired_volts, string volt_mark, int volt_mark_num, double volt_meas_pu, double volt_meas_real, double volt_est_pu, double volt_est_real, double volt_residual_pu_abs, double volt_residual_real_abs, double volt_residual_pct, double P_est, double Q_est, int ZJP, int ZJQ, int outdegree> bus_list;
	
	MaxAccum<double> @@PI = 3.1415926535898;
	SumAccum<double> @sumG  = 0; // store for each node the total G on all of its edges
	SumAccum<double> @sumB  = 0; //similar...
    SumAccum<double> @cal_P  = 0; // store for each node the total G on all of its edges
	SumAccum<double> @cal_Q  = 0; //similar...
        SumAccum<double> @volt_residual_pct = 0;
	ListAccum<bus_list> @@bus_list;

	SumAccum<INT> @@count_all;
    HeapAccum<bus_list>(10000000, volt_mark_num DESC, bus_name DESC) @@bus_all;
    HeapAccum<bus_list>(50, volt_mark_num DESC, bus_name DESC) @@bus_part;
  SumAccum<string> @sub_id;
  SumAccum<double> @base_kV;
  SumAccum<double> @M_Vm;

  SetAccum<string> @@Comp_ID;
  SumAccum<INT> @@count_V_abovelimit;
  SumAccum<INT> @@count_V_belowlimit;
  SumAccum<INT> @@count_P0;
  SumAccum<INT> @@count_P0Q0;
  SumAccum<INT> @@count_P1Q1;

  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_V_abovelimit;
  SumAccum<INT> @@count_500_V_belowlimit;
  SumAccum<INT> @@count_500_P0;
  SumAccum<INT> @@count_500_P0Q0;
  SumAccum<INT> @@count_500_P1Q1;

  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_V_abovelimit;
  SumAccum<INT> @@count_220_V_belowlimit;
  SumAccum<INT> @@count_220_P0;
  SumAccum<INT> @@count_220_P0Q0;
  SumAccum<INT> @@count_220_P1Q1;

  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_V_abovelimit;
  SumAccum<INT> @@count_110_V_belowlimit;
  SumAccum<INT> @@count_110_P0;
  SumAccum<INT> @@count_110_P0Q0;
  SumAccum<INT> @@count_110_P1Q1;

  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_V_abovelimit;
  SumAccum<INT> @@count_35_V_belowlimit;
  SumAccum<INT> @@count_35_P0;
  SumAccum<INT> @@count_35_P0Q0;
  SumAccum<INT> @@count_35_P1Q1;

  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_V_abovelimit;
  SumAccum<INT> @@count_10_V_belowlimit;
  SumAccum<INT> @@count_10_P0;
  SumAccum<INT> @@count_10_P0Q0;
  SumAccum<INT> @@count_10_P1Q1;

  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_V_abovelimit;
  SumAccum<INT> @@count_other_V_belowlimit;
  SumAccum<INT> @@count_other_P0;
  SumAccum<INT> @@count_other_P0Q0;
  SumAccum<INT> @@count_other_P1Q1;

	T0 = {TopoND.*};
        T_bus = {BUS.*};
  sub = {Substation.*};
  comp = {gridcom.*};

  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID;

  Tsub_topo1 = SELECT t FROM sub:s - (topoid_subid:e) -:t
                accum
                t.@sub_id = s.strid;
        
  Ttrans3 = select t from sub:s - (connected_Sub_Trans_three:e)->:t
                accum
                t.@sub_id = s.strid;

  Tneutral_point = select t from Ttrans3:s -(neutral_three:e)-:t
                accum
                t.@sub_id = s.@sub_id;

  Tsub_topo2 = select t from Tneutral_point:s -(topo_neutral:e)-:t
                accum
                t.@sub_id = s.@sub_id;

  Tsub_topo = Tsub_topo1 union Tsub_topo2;

	T1 = SELECT s 
	  from T0: s -(topo_connect:e)->TopoND:t 
	  where s.island == 1 and t.island == 1
	  accum 
        double newG = 0,
        double newB = 0,
		double tap_ratio = abs(e.transformer_final_turns_ratio),
		double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),
		
		case when e.transformer_final_turns_ratio == 0 then
			//compute contribution of each branch to the diagonal terms 
  		    s.@sumG += e.G, 
            s.@sumB += -1*e.B + e.hB - e.from_CP,
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*e.G*cos(s.SE_Va-t.SE_Va) + e.B * sin(s.SE_Va - t.SE_Va)),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*e.G*sin(s.SE_Va-t.SE_Va) - e.B * cos(s.SE_Va - t.SE_Va))
			//log(false, "e.B and e.G", s.exId, t.exId, e.G, e.B)
			
		when e.transformer_final_turns_ratio > 0 then
			s.@sumG += e.G,
            s.@sumB += -1*e.B + e.hB - e.from_CP, // sqrt
			//double tap_ratio = e.transformer_final_turns_ratio/e.kcount,
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va - t.SE_Va)),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va - t.SE_Va)) 
			
		else
			//compute contribution of each branch to the diagonal terms 
            s.@sumG += e.G*tap_ratio_square, 
            s.@sumB += -1*e.B*tap_ratio_square + e.hB - e.from_CP,	
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va - t.SE_Va)),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va - t.SE_Va))    
        end
 		post-accum
		    s.@cal_P += s.SE_Vm*s.SE_Vm*s.@sumG,
			s.@cal_Q += (-1) * s.SE_Vm*s.SE_Vm*s.@sumB; 

//=========== set base value for each TopoND=========================

 busSet = select s from Tsub_topo:s
         post-accum
         if (s.base_kV > 0.001) then
           /*
            if s.M_Vm >= 1.049 or s.M_Vm-s.SE_Vm >= 0.035 then
               if s.base_kV == 500 then
                  s.@base_kV = 525
               else if s.base_kV == 220 then
                  s.@base_kV = 230
               else if s.base_kV == 110 then
                  s.@base_kV = 115
               else if s.base_kV == 35 then
                  s.@base_kV = 37.5
               else if s.base_kV == 10 then
                  s.@base_kV = 10.5
               else
                  s.@base_kV = s.base_kV
               end,
               s.@M_Vm = s.M_Vm*s.base_kV/s.@base_kV
            else
               s.@base_kV = s.base_kV,
               s.@M_Vm = s.M_Vm
            end
            */
               s.@base_kV = s.base_kV,
               s.@M_Vm = s.M_Vm
          end;

	
	Tsub_topo = SELECT s
		 FROM Tsub_topo:s
		 WHERE s.island == 1
		 POST-ACCUM
               if (s.M_Vm != 0) then
                 if (s.base_kV >= 500) then
                     s.@volt_residual_pct = abs(s.@M_Vm-s.SE_Vm)*s.@base_kV/600*100
                 else if (s.base_kV >= 330 and s.base_kV < 500) then
                     s.@volt_residual_pct = abs(s.@M_Vm-s.SE_Vm)*s.@base_kV/396*100
                 else if (s.base_kV >= 220 and s.base_kV < 330) then
                     s.@volt_residual_pct = abs(s.@M_Vm-s.SE_Vm)*s.@base_kV/264*100
                 else
                     s.@volt_residual_pct = abs(s.@M_Vm-s.SE_Vm)*s.@base_kV/132*100
                 end
               else
                     s.@volt_residual_pct = 0
               end,
		 IF (s.M_Vm > 0.0001) THEN
			@@bus_all += bus_list(s.bus_name, s.Sub, s.@sub_id, s.@base_kV, s.@base_kV, "实测", 1, s.@M_Vm, s.@M_Vm*s.@base_kV, s.SE_Vm, s.SE_Vm*s.@base_kV, abs(s.@M_Vm-s.SE_Vm), abs(s.@M_Vm-s.SE_Vm)*s.@base_kV, s.@volt_residual_pct, s.cal_P*100, s.cal_Q*100, s.ZJP, s.ZJQ, s.outdegree),
                        @@bus_part += bus_list(s.bus_name, s.Sub, s.@sub_id, s.@base_kV, s.@base_kV, "实测", 1, s.@M_Vm, s.@M_Vm*s.@base_kV, s.SE_Vm, s.SE_Vm*s.@base_kV, abs(s.@M_Vm-s.SE_Vm), abs(s.@M_Vm-s.SE_Vm)*s.@base_kV, s.@volt_residual_pct, s.cal_P*100, s.cal_Q*100, s.ZJP, s.ZJQ, s.outdegree),
			@@count_all += 1
		 ELSE
			@@bus_all += bus_list(s.bus_name, s.Sub, s.@sub_id, s.@base_kV, s.desired_volts, "无实测", 0, 0, 0, s.SE_Vm, s.SE_Vm*s.desired_volts, 0, 0, 0, s.cal_P*100, s.cal_Q*100, s.ZJP, s.ZJQ, s.outdegree),
                        @@bus_part += bus_list(s.bus_name, s.Sub, s.@sub_id, s.@base_kV, s.desired_volts, "无实测", 0, 0, 0, s.SE_Vm, s.SE_Vm*s.desired_volts, 0, 0, 0, s.cal_P*100, s.cal_Q*100, s.ZJP, s.ZJQ, s.outdegree),
			@@count_all += 1
		 END,
                 double volt = s.base_kV,
                 if volt >= 500 then
                  @@count_500 += 1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_500_V_belowlimit +=1,
                    @@count_V_belowlimit +=1                            
                  else if s.@volt_residual_pct > 2 then
                    @@count_500_V_abovelimit +=1,      
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_500_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_500_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_500_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end

                else if volt >= 220 then
                  @@count_220+=1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_220_V_belowlimit +=1,
                    @@count_V_belowlimit +=1
                  else if s.@volt_residual_pct > 2 then
                    @@count_220_V_abovelimit +=1,
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_220_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_220_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_220_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end

                else if volt >= 110 then
                  @@count_110+=1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_110_V_belowlimit +=1,
                    @@count_V_belowlimit +=1
                  else if s.@volt_residual_pct > 2 then
                    @@count_110_V_abovelimit +=1,
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_110_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_110_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_110_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end

                else if volt >= 34.5 then
                  @@count_35+=1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_35_V_belowlimit +=1,
                    @@count_V_belowlimit +=1
                  else if s.@volt_residual_pct > 2 then
                    @@count_35_V_abovelimit +=1,
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_35_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_35_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_35_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end

                else if volt >= 10 then
                  @@count_10+=1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_10_V_belowlimit +=1,
                    @@count_V_belowlimit +=1
                  else if s.@volt_residual_pct > 2 then
                    @@count_10_V_abovelimit +=1,
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_10_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_10_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_10_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end

                else
                  @@count_other+=1,
                  if s.@volt_residual_pct <= 2 then
                    @@count_other_V_belowlimit +=1,
                    @@count_V_belowlimit +=1
                  else if s.@volt_residual_pct > 2 then
                    @@count_other_V_abovelimit +=1,
                    @@count_V_abovelimit +=1
                  end,
                  if s.ZJP == 1 and s.ZJQ == 0 then
                    @@count_other_P0+=1,
                    @@count_P0+=1
                  else if s.ZJP == 1 and s.ZJQ == 1 then
                    @@count_other_P0Q0 +=1,
                    @@count_P0Q0+=1
                  else if s.ZJP == 0 and s.ZJQ == 0 then
                    @@count_other_P1Q1 +=1,
                    @@count_P1Q1+=1
                  end
                end;
	
  if return_all then
    print @@bus_all;
  else
    print @@bus_part;
  end;

  print @@count_V_abovelimit;
  print @@count_V_belowlimit;
  print @@count_P0;
  print @@count_P0Q0;
  print @@count_P1Q1;

  print @@count_500;
  print @@count_500_V_abovelimit;
  print @@count_500_V_belowlimit;
  print @@count_500_P0;
  print @@count_500_P0Q0;
  print @@count_500_P1Q1;

  print @@count_220;
  print @@count_220_V_abovelimit;
  print @@count_220_V_belowlimit;
  print @@count_220_P0;
  print @@count_220_P0Q0;
  print @@count_220_P1Q1;

  print @@count_110;
  print @@count_110_V_abovelimit;
  print @@count_110_V_belowlimit;
  print @@count_110_P0;
  print @@count_110_P0Q0;
  print @@count_110_P1Q1;

  print @@count_35;
  print @@count_35_V_abovelimit;
  print @@count_35_V_belowlimit;
  print @@count_35_P0;
  print @@count_35_P0Q0;
  print @@count_35_P1Q1;

  print @@count_10;
  print @@count_10_V_abovelimit;
  print @@count_10_V_belowlimit;
  print @@count_10_P0;
  print @@count_10_P0Q0;
  print @@count_10_P1Q1;

  print @@count_other;
  print @@count_other_V_abovelimit;
  print @@count_other_V_belowlimit;
  print @@count_other_P0;
  print @@count_other_P0Q0;
  print @@count_other_P1Q1;

  print @@count_all;		
/*
//===debug topoND number============

  Ttopo = select s from T0:s
      where s.island == 1;

  Ttopo_miss = Ttopo MINUS Tsub_topo;

  print Ttopo_miss[Ttopo_miss.bus_name, Ttopo_miss.Sub, Ttopo_miss.base_kV];
//============ 
*/
}