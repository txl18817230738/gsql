CREATE QUERY se_all_info_load(string companyID="113715890758877224", bool return_all=true) FOR GRAPH gsql_EMS { 
  TYPEDEF TUPLE <string load_name, string bus_name, string sub_name, string sub_id, double volt, string P_mark, int P_mark_num, double load_P_meas, double load_P, double P_diff_abs, double P_diff_pct, string Q_mark, int Q_mark_num, double load_Q_meas, double load_Q, double Q_diff_abs, double Q_diff_pct, double factor> load_list;
	
	ListAccum<load_list> @@load_list;
	SumAccum<string> @bus_name;
	SumAccum<string> @sub_name;
  SumAccum<string> @sub_id;
	SumAccum<double> @volt_est_pu;
	//SumAccum<double> @desired_volts;
		MaxAccum<double> @@PI = 3.1415926535898;
	SumAccum<double> @sumG  = 0; // store for each node the total G on all of its edges
	SumAccum<double> @sumB  = 0; //similar...
    SumAccum<double> @cal_P  = 0; // store for each node the total G on all of its edges
	SumAccum<double> @cal_Q  = 0; //similar...
	SumAccum<double> @total_load_P = 0;
	SumAccum<double> @total_load_Q = 0;
        SumAccum<double> @T_load_P = 0;
        SumAccum<double> @T_load_Q = 0;
	SumAccum<double> @Pld = 0;
	SumAccum<double> @Qld = 0;
        SumAccum<double> @P_diff_pct = 0;
        SumAccum<double> @Q_diff_pct = 0;
	SumAccum<double> @factor = 0;
	SumAccum<INT> @@count_all;
        HeapAccum<load_list>(10000000, P_mark_num DESC, Q_mark_num DESC, load_name ASC) @@loads_all;
        HeapAccum<load_list>(50, P_mark_num DESC, Q_mark_num DESC, load_name ASC) @@loads_part;

  SetAccum<string> @@Comp_ID;
  SumAccum<INT> @@count_P_abovelimit;
  SumAccum<INT> @@count_P_belowlimit;
  SumAccum<INT> @@count_Q_abovelimit;
  SumAccum<INT> @@count_Q_belowlimit;

  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_P_abovelimit;
  SumAccum<INT> @@count_500_P_belowlimit;
  SumAccum<INT> @@count_500_Q_abovelimit;
  SumAccum<INT> @@count_500_Q_belowlimit;

  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_P_abovelimit;
  SumAccum<INT> @@count_220_P_belowlimit;
  SumAccum<INT> @@count_220_Q_abovelimit;
  SumAccum<INT> @@count_220_Q_belowlimit;

  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_P_abovelimit;
  SumAccum<INT> @@count_110_P_belowlimit;
  SumAccum<INT> @@count_110_Q_abovelimit;
  SumAccum<INT> @@count_110_Q_belowlimit;

  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_P_abovelimit;
  SumAccum<INT> @@count_35_P_belowlimit;
  SumAccum<INT> @@count_35_Q_abovelimit;
  SumAccum<INT> @@count_35_Q_belowlimit;

  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_P_abovelimit;
  SumAccum<INT> @@count_10_P_belowlimit;
  SumAccum<INT> @@count_10_Q_abovelimit;
  SumAccum<INT> @@count_10_Q_belowlimit;

  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_P_abovelimit;
  SumAccum<INT> @@count_other_P_belowlimit;
  SumAccum<INT> @@count_other_Q_abovelimit;
  SumAccum<INT> @@count_other_Q_belowlimit;
  SumAccum<double> @@error_limit_P;
  SumAccum<double> @@error_limit_Q;
  SumAccum<double> @@error_p_baddata;
  SumAccum<double> @@error_q_baddata;
  
  SumAccum<int> @p_meas_flag;
  SumAccum<int> @q_meas_flag;
	
	T0 = {TopoND.*};
	T_load = {l_oad.*};
 
  sub = {Substation.*};
  comp = {gridcom.*};
  Tparameter = {parameters.*};
  
  //parameter setting
  Tparameter = select s from Tparameter:s
     post-accum
     @@error_limit_P += s.error_limit_P,
     @@error_limit_Q += s.error_limit_Q,
     @@error_p_baddata += s.backup1,
     @@error_q_baddata += s.backup2;
        //T_unit = {unit.*};

  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;  

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID;

  loadSet = SELECT t FROM sub:s - (connected_Sub_Load:e) ->:t
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid;
  
  loadSet = select s from loadSet:s -(Meas_Load:e)-:t 
                ACCUM
                  s.@p_meas_flag = t.P_PseudoFlag,
                  s.@q_meas_flag = t.Q_PseudoFlag;
 
	
	loadSet = SELECT s
		    FROM loadSet:s - (topo_load:e) - TopoND:t
			where t.island == 1 and s.off == 0 and s.p_se_error <@@error_p_baddata and s.q_se_error <@@error_q_baddata and abs(s.Pimeas)>0.0001 and abs(s.Qimeas)>0.0001
                    accum
                        s.@bus_name = t.bus_name,
                        s.@volt_est_pu = t.SE_Vm
                    post-accum
                        /**
                        if (s.volt >= 500) then
                          if (s.Pimeas != 0) then
                            s.@P_diff_pct = abs(s.Pimeas - s.P)/10.82
                          else
                            s.@P_diff_pct = 0
                          end,
                          if (s.Qimeas != 0) then
                            s.@Q_diff_pct = abs(s.Qimeas - s.Q)/10.82
                          else
                            s.@Q_diff_pct = 0
                          end
                        else if (s.volt >= 330 and s.volt < 500) then
                          if (s.Pimeas != 0) then
                            s.@P_diff_pct = abs(s.Pimeas - s.P)/6.86
                          else
                            s.@P_diff_pct = 0
                          end,
                          if (s.Qimeas != 0) then
                            s.@Q_diff_pct = abs(s.Qimeas - s.Q)/6.86
                          else
                            s.@Q_diff_pct = 0
                          end
                        else if (s.volt >= 220 and s.volt < 330) then
                          if (s.Pimeas != 0) then
                            s.@P_diff_pct = abs(s.Pimeas - s.P)/3.05
                          else
                            s.@P_diff_pct = 0
                          end,
                          if (s.Qimeas != 0) then
                            s.@Q_diff_pct = abs(s.Qimeas - s.Q)/3.05
                          else
                            s.@Q_diff_pct = 0
                          end
                        else
                          if (s.Pimeas != 0) then
                            s.@P_diff_pct = abs(s.Pimeas - s.P)/1.14
                          else
                            s.@P_diff_pct = 0
                          end,
                          if (s.Qimeas != 0) then
                            s.@Q_diff_pct = abs(s.Qimeas - s.Q)/1.14
                          else
                            s.@Q_diff_pct = 0
                          end
                        end,
                        **/
                  IF (s.Pimeas != 0 and s.Qimeas != 0) THEN
                        @@loads_all += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "实测", 1, s.Pimeas, s.P, abs(s.Pimeas - s.P), s.p_se_error, "实测", 1, s.Qimeas, s.Q, abs(s.Qimeas - s.Q), s.p_se_error, s.@factor),
                        @@loads_part += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "实测", 1, s.Pimeas, s.P, abs(s.Pimeas - s.P), s.p_se_error, "实测", 1, s.Qimeas, s.Q, abs(s.Qimeas - s.Q), s.p_se_error, s.@factor),
                        @@count_all += 1
                 ELSE IF (s.Pimeas != 0 and s.Qimeas == 0) THEN
                        @@loads_all += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "实测", 1, s.Pimeas, s.P, abs(s.Pimeas - s.P), s.p_se_error, "无实测", 0, 0, s.Q, 0, 0, s.@factor),
                        @@loads_part += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "实测", 1, s.Pimeas, s.P, abs(s.Pimeas - s.P), s.p_se_error, "无实测", 0, 0, s.Q, 0, 0, s.@factor),
                        @@count_all += 1
                 ELSE IF (s.Pimeas == 0 and s.Qimeas != 0) THEN                       
                        @@loads_all += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "无实测", 0, 0, s.P, 0, 0, "实测", 1, s.Qimeas,s.Q, abs(s.Qimeas - s.Q), s.p_se_error, s.@factor),
                        @@loads_part += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "无实测", 0, 0, s.P, 0, 0, "实测", 1, s.Qimeas,s.Q, abs(s.Qimeas - s.Q), s.p_se_error, s.@factor),
                        @@count_all += 1
                 ELSE                      
                        @@loads_all += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "无实测", 0, 0, s.P, 0, 0, "无实测", 0, 0, s.Q, 0, 0, s.@factor),
                        @@loads_part += load_list(s.name, s.@bus_name, s.@sub_name, s.@sub_id, s.volt, "无实测", 0, 0, s.P, 0, 0, "无实测", 0, 0, s.Q, 0, 0, s.@factor),
                        @@count_all += 1
                 END,
                        if s.volt >= 500  then
                            @@count_500 += 1,
                          IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_500_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_500_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                          end,
                          IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_500_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_500_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end	
                            end
		                else if (s.volt >= 220 and s.volt < 500) then
                            @@count_220 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_220_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_220_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_220_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_220_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end
                            end
                    else if (s.volt >= 110 and s.volt < 220) then
                            @@count_110 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_110_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_110_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_110_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_110_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end
                            end
                    else if (s.volt >= 34.5 and s.volt < 110) then
                            @@count_35 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_35_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_35_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_35_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_35_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end
                            end
                    else if (s.volt >= 10 and s.volt < 34.5) then
                            @@count_10 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_10_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_10_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_10_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_10_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end
                            end
                    else
                            @@count_other += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error <= @@error_limit_P then
                                @@count_other_P_belowlimit +=1,
                                @@count_P_belowlimit +=1
                            else if s.p_se_error > @@error_limit_P then
                                @@count_other_P_abovelimit +=1,
                                @@count_P_abovelimit +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error <= @@error_limit_Q then
                                @@count_other_Q_belowlimit +=1,
                                @@count_Q_belowlimit +=1
                            else if s.q_se_error > @@error_limit_Q then
                                @@count_other_Q_abovelimit +=1,
                                @@count_Q_abovelimit +=1
                            end
                            end
                          end;




  if return_all then
    print @@loads_all;
  else
    print @@loads_part;
  end;

  print @@count_P_abovelimit;
  print @@count_P_belowlimit;
  print @@count_Q_abovelimit;
  print @@count_Q_belowlimit;

  print @@count_500;
  print @@count_500_P_abovelimit;
  print @@count_500_P_belowlimit;
  print @@count_500_Q_abovelimit;
  print @@count_500_Q_belowlimit;

  print @@count_220;
  print @@count_220_P_abovelimit;
  print @@count_220_P_belowlimit;
  print @@count_220_Q_abovelimit;
  print @@count_220_Q_belowlimit;

  print @@count_110;
  print @@count_110_P_abovelimit;
  print @@count_110_P_belowlimit;
  print @@count_110_Q_abovelimit;
  print @@count_110_Q_belowlimit;

  print @@count_35;
  print @@count_35_P_abovelimit;
  print @@count_35_P_belowlimit;
  print @@count_35_Q_abovelimit;
  print @@count_35_Q_belowlimit;

  print @@count_10;
  print @@count_10_P_abovelimit;
  print @@count_10_P_belowlimit;
  print @@count_10_Q_abovelimit;
  print @@count_10_Q_belowlimit;

  print @@count_other;
  print @@count_other_P_abovelimit;
  print @@count_other_P_belowlimit;
  print @@count_other_Q_abovelimit;
  print @@count_other_Q_belowlimit;

  print @@count_all;
}