CREATE QUERY se_all_info_load_baddata(string companyID="113715890758877224", bool return_all=true) FOR GRAPH gsql_EMS { 
  /**
  TYPEDEF TUPLE <string load_name, string bus_name, string sub_name, string sub_id, double volt, string P_mark, int P_mark_num, double load_P_meas, double load_P, double P_diff_abs, double P_diff_pct, string Q_mark, int Q_mark_num, double load_Q_meas, double load_Q, double Q_diff_abs, double Q_diff_pct, double factor> load_list;
  **/
  TYPEDEF TUPLE <string meas_id,string sub_name,string sub_id,string load_name,string device_type,double volt,string P_mark, int p_quality,double load_P_meas, double load_P, double P_diff, string P_diff_pct, string Q_mark, int q_quality,double load_Q_meas, double load_Q, double Q_diff, string Q_diff_pct> load_list;
	
	ListAccum<load_list> @@load_list;
	SumAccum<string> @sub_name;
  SumAccum<string> @sub_id;
	
  SumAccum<double> @P_diff_pct = 0;
  SumAccum<double> @Q_diff_pct = 0;
	SumAccum<INT> @@count_all;
  HeapAccum<load_list>(10000000, volt DESC, load_P DESC, load_Q ASC) @@loads_all;
  HeapAccum<load_list>(50, volt DESC, load_P DESC, load_Q ASC) @@loads_part;

  SetAccum<string> @@Comp_ID;
  SumAccum<INT> @@count_P_abovelimit10;
  SumAccum<INT> @@count_Q_abovelimit10;
 

  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_P_abovelimit10;
  SumAccum<INT> @@count_500_Q_abovelimit10;


  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_P_abovelimit10;
  SumAccum<INT> @@count_220_Q_abovelimit10;


  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_P_abovelimit10;
  SumAccum<INT> @@count_110_Q_abovelimit10;


  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_P_abovelimit10;
  SumAccum<INT> @@count_35_Q_abovelimit10;

  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_P_abovelimit10;
  SumAccum<INT> @@count_10_Q_abovelimit10;

  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_P_abovelimit10;
  SumAccum<INT> @@count_other_Q_abovelimit10;
 
  SumAccum<double> @@error_limit_P;
  SumAccum<double> @@error_limit_Q;
  SumAccum<double> @@error_p_baddata;
  SumAccum<double> @@error_q_baddata;
  
  SumAccum<int> @p_meas_flag;
  SumAccum<int> @q_meas_flag;
  SumAccum<int> @p_meas_quality_flag;
  SumAccum<int> @q_meas_quality_flag;
  SumAccum<string> @meas_id;
	
	T0 = {TopoND.*};
	T_load = {l_oad.*};
 
  sub = {Substation.*};
  comp = {gridcom.*};
  Tparameter = {parameters.*};
  
  //parameter setting
  Tparameter = select s from Tparameter:s
     post-accum
     @@error_limit_P += s.error_limit_P,
     @@error_limit_Q += s.error_limit_Q,
     @@error_p_baddata += s.backup1,
     @@error_q_baddata += s.backup2;
 
  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;  

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID;

  loadSet = SELECT t FROM sub:s - (connected_Sub_Load:e) ->:t
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid;
  
  loadSet = select s from loadSet:s -(Meas_Load:e)-:t 
                ACCUM
                  s.@p_meas_flag = t.P_PseudoFlag,
                  s.@q_meas_flag = t.Q_PseudoFlag,
                  s.@p_meas_quality_flag = t.PFlag,
                  s.@q_meas_quality_flag = t.QFlag,
                  s.@meas_id = t.id;
 
	
	loadSet = SELECT s
		    FROM loadSet:s - (topo_load:e) - TopoND:t
			where t.island == 1 and s.off == 0 and (s.p_se_error >=@@error_p_baddata or s.q_se_error >=@@error_q_baddata) //and (s.@p_meas_flag ==0  or s.@q_meas_flag ==0)
                    accum
                        string P_mark = "",
                        string Q_mark = "",
                        double P_res = 0,
                        double Q_res = 0,
                        string P_res_pct = "",
                        string Q_res_pct = "",
                        IF(s.@p_meas_flag == 0) THEN
                                P_mark = "实测",
                                P_res = abs(s.P -s.Pimeas),
                                P_res_pct = ToString(s.p_se_error)
                        ELSE
                                P_mark = "无实测",
                                P_res = 0,
                                P_res_pct = "——"
                        END,
                        
                        IF(s.@q_meas_flag == 0) THEN
                                Q_mark = "实测",
                                Q_res = abs(s.Q - s.Qimeas),
                                Q_res_pct = ToString(s.q_se_error)
                        ELSE
                                Q_mark = "无实测",
                                Q_res = 0,
                                Q_res_pct = "——"
                        END,
                  
                        @@loads_all += load_list(s.@meas_id, s.@sub_name, s.@sub_id, s.name, "负荷", s.volt,P_mark,s.@p_meas_quality_flag, s.Pimeas, s.P, P_res, P_res_pct, Q_mark,s.@q_meas_quality_flag, s.Qimeas, s.Q, Q_res, Q_res_pct),
                        @@loads_part += load_list(s.@meas_id, s.@sub_name, s.@sub_id, s.name, "负荷", s.volt,P_mark, s.@p_meas_quality_flag,s.Pimeas, s.P, P_res, P_res_pct, Q_mark,s.@q_meas_quality_flag, s.Qimeas, s.Q, Q_res, Q_res_pct),
                        @@count_all += 1,
                        if s.volt >= 500  then
                            @@count_500 += 1,
                          IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_500_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                          end,
                          IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_500_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end	
                            end
		                else if (s.volt >= 220 and s.volt < 500) then
                            @@count_220 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_220_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_220_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end
                            end
                    else if (s.volt >= 110 and s.volt < 220) then
                            @@count_110 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_110_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_110_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end
                            end
                    else if (s.volt >= 34.5 and s.volt < 110) then
                            @@count_35 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_35_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_35_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end
                            end
                    else if (s.volt >= 10 and s.volt < 34.5) then
                            @@count_10 += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_10_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_10_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end
                            end
                    else
                            @@count_other += 1,
                            IF (s.@p_meas_flag == 0) THEN
                            if s.p_se_error >= @@error_p_baddata then
                                @@count_other_P_abovelimit10 +=1,
                                @@count_P_abovelimit10 +=1
                            end
                            end,
                            IF (s.@q_meas_flag == 0) THEN
                            if s.q_se_error >= @@error_q_baddata then
                                @@count_other_Q_abovelimit10 +=1,
                                @@count_Q_abovelimit10 +=1
                            end
                            end
                          end;




  if return_all then
    print @@loads_all;
  else
    print @@loads_part;
  end;

  print @@count_P_abovelimit10;
  //print @@count_P_belowlimit;
  print @@count_Q_abovelimit10;
  //print @@count_Q_belowlimit;

  print @@count_500;
  print @@count_500_P_abovelimit10;
  //print @@count_500_P_belowlimit;
  print @@count_500_Q_abovelimit10;
  //print @@count_500_Q_belowlimit;

  print @@count_220;
  print @@count_220_P_abovelimit10;
  //print @@count_220_P_belowlimit;
  print @@count_220_Q_abovelimit10;
  //print @@count_220_Q_belowlimit;

  print @@count_110;
  print @@count_110_P_abovelimit10;
  //print @@count_110_P_belowlimit;
  print @@count_110_Q_abovelimit10;
  //print @@count_110_Q_belowlimit;

  print @@count_35;
  print @@count_35_P_abovelimit10;
  //print @@count_35_P_belowlimit;
  print @@count_35_Q_abovelimit10;
  //print @@count_35_Q_belowlimit;

  print @@count_10;
  print @@count_10_P_abovelimit10;
  //print @@count_10_P_belowlimit;
  print @@count_10_Q_abovelimit10;
  //print @@count_10_Q_belowlimit;

  print @@count_other;
  print @@count_other_P_abovelimit10;
  //print @@count_other_P_belowlimit;
  print @@count_other_Q_abovelimit10;
  //print @@count_other_Q_belowlimit;

  print @@count_all;
}