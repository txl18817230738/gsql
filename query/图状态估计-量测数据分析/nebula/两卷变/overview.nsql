"""
use ems_v1
match (startid:gridcom)-[:gridcom_gridcom]->{0,}(:gridcom)-[:connected_grid_sub]->(s:Substation)-[:connected_Sub_Trans_two]->(srcTrans2:`two_port_transformer`)<-[ed:txI_txJ_transformerline]-(tarTrans2:`two_port_transformer`) filter where startid.id = "113715890758877224" and srcTrans2.island=1 and tarTrans2.island=1
let
p_rate = case when srcTrans2.S is not NULL then s.S else 0.0 end,
Pimeas = case when srcTrans2.Pimeas is not NULL then srcTrans2.Pimeas else 0.0 end,
Qimeas = case when srcTrans2.Qimeas is not NULL then srcTrans2.Qimeas else 0.0 end,
Pimeas_reverse = case when tarTrans2.Pimeas is not NULL then tarTrans2.Pimeas else 0.0 end,
Qimeas_reverse = case when tarTrans2.Qimeas is not NULL then tarTrans2.Qimeas else 0.0 end
let
meas_overload = case when abs(p_rate) >= 0.5 then abs(Pimeas/p_rate)*100 else 0.0 end
let
meas_overload_20 = case when meas_overload >= 0.0 and meas_overload<20 then 1 else 0 end,
meas_overload_80 = case when meas_overload >= 20.0 and meas_overload<80 then 1 else 0 end,
meas_overload_100 = case when meas_overload >= 80.0 and meas_overload<100 then 1 else 0 end,
meas_overload_large_100 = case when meas_overload > 100.0 then 1 else 0 end
return case when srcTrans2.volt >= 500.0 then "500kV" when srcTrans2.volt >= 220.0 then "220kV"  when srcTrans2.volt >= 110.0 then "110kV" when srcTrans2.volt >= 34.5 then "35kV" when srcTrans2.volt >= 10.0 then "10kV" else "other" end as voltageLevel, count(*) as total, sum(meas_overload_20) as over_load_less, sum(meas_overload_80) as over_load_middle, sum(meas_overload_100) as over_load_large, sum(meas_overload_large_100) as over_load_overload group by voltageLevel Next return voltageLevel, total, over_load_less, over_load_middle, over_load_large, over_load_overload
"""