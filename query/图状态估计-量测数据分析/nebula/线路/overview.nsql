"""
use ems_v1 match (startid:gridcom)-[:gridcom_gridcom]->{0,}(:gridcom)-[:connected_grid_sub]->(s:Substation)-[:connected_Sub_Aclinedot]->(F6:`ACline_dot`)<-[e:aclinedot_aclinedot_reverse]-(F7:`ACline_dot`) filter where startid.id = "113715890758877224" and s.subtype <> "虚拟站" and s.subtype <> "其他" and s.subtype <> "线端连接站" and F6.island=1 and F7.island=1
let
e_volt = case when e.volt is not NULL then e.volt else 0.0 end,
e_Ih = case when e.Ih is not NULL then e.Ih else 0.0 end
let
p_rate = sqrt(3)*e_volt*e_Ih/1000,
pimeas = case when F6.Pimeas is not NULL then F6.Pimeas else 0.0 end
let
meas_overload = case when abs(p_rate) >= 0.5 then abs(pimeas/p_rate)*100 else 0.0 end
let
meas_overload_20 = case when meas_overload >= 0.0 and meas_overload<20 then 1 else 0 end,
meas_overload_80 = case when meas_overload >= 20.0 and meas_overload<80 then 1 else 0 end,
meas_overload_100 = case when meas_overload >= 80.0 and meas_overload<100 then 1 else 0 end,
meas_overload_large_100 = case when meas_overload > 100.0 then 1 else 0 end
return case when F6.volt >= 500.0 then "500kV" when F6.volt >= 220.0 then "220kV"  when F6.volt >= 110.0 then "110kV" when F6.volt >= 34.5 then "35kV" when F6.volt >= 10.0 then "10kV" else "other" end as voltageLevel, count(*) as total, sum(meas_overload_20) as over_load_less, sum(meas_overload_80) as over_load_middle, sum(meas_overload_100) as over_load_large, sum(meas_overload_large_100) as over_load_overload group by voltageLevel Next return voltageLevel, total, over_load_less, over_load_middle, over_load_large, over_load_overload
"""