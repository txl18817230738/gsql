create query meas_maintenance_cp (string companyID="113715890758877224", bool return_all=true)
for graph gsql_EMS {
	
	
	TYPEDEF TUPLE<string CP_name, string sub_name, string sub_id, double volt, double desired_volts, string Q_mark, double Q_meas_real> CP_list;
		
	
	SumAccum<INT> @@count_all;
	SumAccum<string> @sub_name;
	SumAccum<string> @sub_id;
	HeapAccum<CP_list>(10000000, volt DESC, CP_name DESC, sub_name DESC) @@result;
	HeapAccum<CP_list>(50, volt DESC, CP_name DESC, sub_name DESC) @@result_part;
	SetAccum<string> @@Comp_ID;
  
	SumAccum<INT> @@count_negative;
	SumAccum<INT> @@count_zero;
	SumAccum<INT> @@count_positive;
	
  
  
	SumAccum<INT> @@count_500;
	SumAccum<INT> @@count_500_negative;
	SumAccum<INT> @@count_500_zero;
	SumAccum<INT> @@count_500_positive;
	
  
	SumAccum<INT> @@count_220;
	SumAccum<INT> @@count_220_negative;
	SumAccum<INT> @@count_220_zero;
	SumAccum<INT> @@count_220_positive;
  
  
    SumAccum<INT> @@count_110;
	SumAccum<INT> @@count_110_negative;
	SumAccum<INT> @@count_110_zero;
	SumAccum<INT> @@count_110_positive;
  
	SumAccum<INT> @@count_35;
	SumAccum<INT> @@count_35_negative;
	SumAccum<INT> @@count_35_zero;
	SumAccum<INT> @@count_35_positive;
  
	SumAccum<INT> @@count_10;
	SumAccum<INT> @@count_10_negative;
	SumAccum<INT> @@count_10_zero;
	SumAccum<INT> @@count_10_positive;
	
  
	SumAccum<INT> @@count_other;
	SumAccum<INT> @@count_other_negative;
	SumAccum<INT> @@count_other_zero;
	SumAccum<INT> @@count_other_positive;

	T0 = {TopoND.*};
	sub = {Substation.*};
	comp = {gridcom.*};


  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID; 
	
  cpSet = SELECT t FROM sub:s - (connected_Sub_Compensator_P:e) ->:t
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid;

	
	// C_P
	
	T_CP = SELECT s FROM cpSet:s - (topo_compensatorP:e) - TopoND:t
			WHERE t.island == 1;
			
			
	T_CP = SELECT s FROM T_CP:s
			POST-ACCUM
			IF s.Qimeas != 0 THEN
				@@result += CP_list(s.name, s.@sub_name, s.@sub_id, s.volt, s.base_value, "实测", s.Qimeas),
				@@result_part += CP_list(s.name, s.@sub_name, s.@sub_id, s.volt, s.base_value, "实测", s.Qimeas)
			ELSE
				@@result += CP_list(s.name, s.@sub_name, s.@sub_id, s.volt, s.base_value, "无实测", 0),
				@@result_part += CP_list(s.name, s.@sub_name, s.@sub_id, s.volt, s.base_value, "无实测", 0)
			END,
			@@count_all += 1,
			double volt = s.volt,
			if volt >= 500 then
				 @@count_500 += 1,
				 if s.Qimeas < 0 then
                    @@count_500_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_500_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_500_positive+=1,
                    @@count_positive+=1            
                  end
			else if volt >= 220 then
                  @@count_220 += 1,
				 if s.Qimeas < 0 then
                    @@count_220_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_220_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_220_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else if volt >= 110 then
                  @@count_110 += 1,
				 if s.Qimeas < 0 then
                    @@count_110_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_110_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_110_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else if volt >= 34.5 then
                  @@count_35+=1,
				 if s.Qimeas < 0 then
                    @@count_35_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_35_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_35_positive+=1,
                    @@count_positive+=1            
                  end
  
                else if volt >= 10 then
                  @@count_10+=1,
				 if s.Qimeas < 0 then
                    @@count_10_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_10_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_10_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else
                  @@count_other+=1,
				 if s.Qimeas < 0 then
                    @@count_other_negative+=1,
                    @@count_negative+=1
                  else if s.Qimeas == 0 then
                    @@count_other_zero+=1,
                    @@count_zero+=1
                  else if s.Qimeas >0 then
                    @@count_other_positive+=1,
                    @@count_positive+=1            
                  end
              end;
	
						
	if return_all then
    print @@result;
  else
    print @@result_part;
  end;
	
	print @@count_negative;
	print @@count_zero;
	print @@count_positive;
	
  
  
	print @@count_500;
	print @@count_500_negative;
	print @@count_500_zero;
	print @@count_500_positive;
	
  
	print @@count_220;
	print @@count_220_negative;
	print @@count_220_zero;
	print @@count_220_positive;
  
  
    print @@count_110;
	print @@count_110_negative;
	print @@count_110_zero;
	print @@count_110_positive;
  
	print @@count_35;
	print @@count_35_negative;
	print @@count_35_zero;
	print @@count_35_positive;
  
	print @@count_10;
	print @@count_10_negative;
	print @@count_10_zero;
	print @@count_10_positive;
	
  
	print @@count_other;
	print @@count_other_negative;
	print @@count_other_zero;
	print @@count_other_positive;
  
  print @@count_all;
						
				
}