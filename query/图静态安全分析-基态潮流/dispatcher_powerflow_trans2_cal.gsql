CREATE QUERY dispatcher_powerflow_trans2_cal(string companyID="113715890758877224", bool return_all=true, double p_qualified_factor=0.98, double q_qualified_factor=0.98) FOR GRAPH gsql_EMS { 
  TYPEDEF TUPLE <string trans2_name, string area, string sub_name, string sub_id, string from_bus_name, string to_bus_name, double from_volt, double to_volt, double loss,double from_p_pf, double from_q_pf, double Mis_Pij_per, double Mis_Qij_per, double load_factor, double to_p_pf, double to_q_pf,  double Mis_Pij_per_rev, double Mis_Qij_per_rev, string violation, double Line1_MVA, double Line2_MVA, double Line3_MVA> trans_result;
  

	SumAccum<string> @sub_id;
	SumAccum<INT> @@count_all;
  SumAccum<int> @island;
  SumAccum<string> @bus_name;
  SumAccum<string> @area;
  
  SumAccum<double> @P_error_pct;
  SumAccum<double> @Q_error_pct;

  HeapAccum<trans_result>(10000000, from_p_pf DESC, from_q_pf DESC, load_factor DESC, from_bus_name DESC, to_bus_name DESC) @@trans2_all;
	HeapAccum<trans_result>(50, from_p_pf DESC, from_q_pf DESC, load_factor DESC, from_bus_name DESC, to_bus_name DESC) @@trans2_part;
	

  SetAccum<string> @@Comp_ID;

  
  SumAccum<INT> @@count_20;
  SumAccum<INT> @@count_20_80;
  SumAccum<INT> @@count_80_100;
  SumAccum<INT> @@count_100;
  SumAccum<INT> @@count_p_qualified;
  SumAccum<INT> @@count_q_qualified;
  
  
  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_20;
  SumAccum<INT> @@count_500_20_80;
  SumAccum<INT> @@count_500_80_100;
  SumAccum<INT> @@count_500_100;
  SumAccum<INT> @@count_500_p_qualified;
  SumAccum<INT> @@count_500_q_qualified;
  
  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_20;
  SumAccum<INT> @@count_220_20_80;
  SumAccum<INT> @@count_220_80_100;
  SumAccum<INT> @@count_220_100;
  SumAccum<INT> @@count_220_p_qualified;
  SumAccum<INT> @@count_220_q_qualified;
  
  
  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_20;
  SumAccum<INT> @@count_110_20_80;
  SumAccum<INT> @@count_110_80_100;
  SumAccum<INT> @@count_110_100;
  SumAccum<INT> @@count_110_p_qualified;
  SumAccum<INT> @@count_110_q_qualified;
  
  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_20;
  SumAccum<INT> @@count_35_20_80;
  SumAccum<INT> @@count_35_80_100;
  SumAccum<INT> @@count_35_100;
  SumAccum<INT> @@count_35_p_qualified;
  SumAccum<INT> @@count_35_q_qualified;
  
  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_20;
  SumAccum<INT> @@count_10_20_80;
  SumAccum<INT> @@count_10_80_100;
  SumAccum<INT> @@count_10_100;
  SumAccum<INT> @@count_10_p_qualified;
  SumAccum<INT> @@count_10_q_qualified;
  
  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_20;
  SumAccum<INT> @@count_other_20_80;
  SumAccum<INT> @@count_other_80_100;
  SumAccum<INT> @@count_other_100;
  SumAccum<INT> @@count_other_p_qualified;
  SumAccum<INT> @@count_other_q_qualified;
	
  sub = {Substation.*};
  comp = {gridcom.*};
  T0 = {TopoND.*};	

  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID
                accum 
                    t.@area = s.name;
        
  trans2tSet = SELECT t FROM sub:s - (connected_Sub_Trans_two:e) ->:t
                accum
                t.@sub_id = s.strid,
                t.@area = s.@area;
                
	
    /**
    Ttrans2 = select t from trans2tSet:t- (topo_Tx_Two:e) -:s
            accum
                t.@island = s.island,
                t.@bus_name = s.bus_name,
                t.@device_type = "双绕组变压器";
     **/
  
  
   Twoport = select t from trans2tSet:t - (topo_Tx_Two:e) -:s
            accum
            t.@island = s.island,
            t.@bus_name = s.bus_name
			post-accum
			 if (t.volt >= 500) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/1082*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/1082*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                else if (t.volt >= 330 and t.volt < 500) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/686*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
				  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/686*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                else if (t.volt >= 220 and t.volt< 330) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/305*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/305*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
				else
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/141*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/141*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                end;
			
		 Ttwoport = select s from Twoport:s - (txI_txJ_transformerline:e) -:t
            where s.@island == 1 and t.@island == 1
            accum
                        double loss=s.P_pf - t.P_pf,
                        double meas_overload=0,
                        double MVA=0,
                        int tmpCI = 0,
                        double p_rate = s.S,
                        if p_rate !=0 then 
                          meas_overload = abs(s.P_pf / p_rate)*100 
                        end,
                        double line_Q1 = s.S,
                        double line_Q2 = 1.1*line_Q1,
                        double line_Q3 = 1.2*line_Q1,
                        MVA=sqrt(s.P_pf*s.P_pf+s.Q_pf*s.Q_pf),
                        IF (line_Q1 < 10) THEN
                           line_Q1 = 9999,
                           line_Q2 = 9999,
                           line_Q3 = 9999
                        END,
                           case when (MVA>=line_Q1 and MVA<line_Q2) then
                                 tmpCI = 1
                           when (MVA>=line_Q2 and MVA<line_Q3) then
                                 tmpCI = 2
                           when (MVA>=line_Q3) then
                                 tmpCI = 3
                           end,
                                        IF (tmpCI == 1) THEN
                                                 @@trans2_all+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "1级越限", line_Q1, line_Q2, line_Q3),
                                                @@trans2_part+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "1级越限", line_Q1, line_Q2, line_Q3)
                                        
                                        ELSE IF (tmpCI == 2) THEN
                                                @@trans2_part+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "2级越限", line_Q1, line_Q2, line_Q3),
                                                @@trans2_all+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "2级越限", line_Q1, line_Q2, line_Q3)
                                        ELSE IF (tmpCI == 3) THEN
                                                @@trans2_part+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "3级越限", line_Q1, line_Q2, line_Q3),
										                             @@trans2_all+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "3级越限", line_Q1, line_Q2, line_Q3)    
										                    ELSE 
										         @@trans2_part+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "正常", line_Q1, line_Q2, line_Q3),
											       @@trans2_all+=trans_result(s.name, s.@area, s.Substation, s.@sub_id, s.@bus_name, t.@bus_name, s.volt, t.volt, loss, s.P_pf, s.Q_pf, s.@P_error_pct, s.@Q_error_pct, meas_overload, t.P_pf, t.Q_pf, t.@P_error_pct, t.@Q_error_pct, "正常", line_Q1, line_Q2, line_Q3)
                                        END,
                            @@count_all += 1,
                        double volt = s.volt,
                        if volt >= 500 then
                  @@count_500 += 1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_500_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_500_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_500_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_500_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_500_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_500_100+=1,
                    @@count_100+=1
                  end            
                
                else if volt >= 220 then
                  @@count_220+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_220_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_220_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_220_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_220_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_220_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_220_100+=1,
                    @@count_100+=1
                  end
                  
                else if volt >= 110 then
                  @@count_110+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_110_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_110_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_110_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_110_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_110_80_100+=1,
                    @@count_80_100+=1        
                  else if meas_overload > 100 then
                    @@count_110_100+=1,
                    @@count_100+=1
                  end
                  
                else if volt >= 34.5 then
                  @@count_35+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_35_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_35_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_35_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_35_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_35_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_35_100+=1,
                    @@count_100+=1
                  end
  
                else if volt >= 10 then
                  @@count_10+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_10_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_10_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_10_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_10_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_10_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_10_100+=1,
                    @@count_100+=1
                  end
                  
                else
                  @@count_other+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_other_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_other_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_other_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_other_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_other_80_100+=1,
                    @@count_80_100+=1        
                  else if meas_overload > 100 then
                    @@count_other_100+=1,
                    @@count_100+=1
                  end
                end;
  
  
  if return_all then
    print @@trans2_all;
  else
    print @@trans2_part;
  end;
  print @@count_all;
  print @@count_20;
  print @@count_20_80;
  print @@count_80_100;
  print @@count_100;
  print @@count_p_qualified;
  print @@count_q_qualified;
  
  
  print @@count_500;
  print @@count_500_20;
  print @@count_500_20_80;
  print @@count_500_80_100;
  print @@count_500_100;
  print @@count_500_q_qualified;
  print @@count_500_p_qualified;
  
  print @@count_220;
  print @@count_220_20;
  print @@count_220_20_80;
  print @@count_220_80_100;
  print @@count_220_100;
  print @@count_220_q_qualified;
  print @@count_220_p_qualified;
  
  print @@count_110;
  print @@count_110_20;
  print @@count_110_20_80;
  print @@count_110_80_100;
  print @@count_110_100;
  print @@count_110_q_qualified;
  print @@count_110_p_qualified;
  
  print @@count_35;
  print @@count_35_20;
  print @@count_35_20_80;
  print @@count_35_80_100;
  print @@count_35_100;
  print @@count_35_q_qualified;
  print @@count_35_p_qualified;
  
  print @@count_10;
  print @@count_10_20;
  print @@count_10_20_80;
  print @@count_10_80_100;
  print @@count_10_100;
  print @@count_10_q_qualified;
  print @@count_10_p_qualified;
  
  print @@count_other;
  print @@count_other_20;
  print @@count_other_20_80;
  print @@count_other_80_100;
  print @@count_other_100;
  print @@count_other_q_qualified;
  print @@count_other_p_qualified;
  
  
}