CREATE QUERY dispatcher_powerflow_acline_cal(string companyID="113715890758877224", bool return_all=true,double p_qualified_factor=0.98, double q_qualified_factor=0.98) FOR GRAPH gsql_EMS { 
  TYPEDEF TUPLE < string edge_name, string from_sub, string sub_id, string tap_bus_name, double P_TLPF, double loadfactor, double P_residual_pct, double Q_TLPF, double Q_residual_pct, double P_TLPF_reverse, double P_residual_pct_reverse, double Q_TLPF_reverse, double Q_residual_pct_reverse, double lineloss, double Line1_MVA, double Line2_MVA, double Line3_MVA, double volt > row;	
    
    SumAccum<int> @island;
    SumAccum<string> @bus_name;
    SumAccum<string> @sub_name;
    SumAccum<string> @sub_id;
   

    SumAccum<double> @P_error_pct;
    SumAccum<double> @Q_error_pct;
  
    SetAccum<string> @@Comp_ID;
  
  SumAccum<INT> @@count_all;
  SumAccum<INT> @@count_20;
  SumAccum<INT> @@count_20_80;
  SumAccum<INT> @@count_80_100;
  SumAccum<INT> @@count_100;
  SumAccum<INT> @@count_p_qualified;
  SumAccum<INT> @@count_q_qualified;
  
  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_20;
  SumAccum<INT> @@count_500_20_80;
  SumAccum<INT> @@count_500_80_100;
  SumAccum<INT> @@count_500_100;
  SumAccum<INT> @@count_500_p_qualified;
  SumAccum<INT> @@count_500_q_qualified;
  
  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_20;
  SumAccum<INT> @@count_220_20_80;
  SumAccum<INT> @@count_220_80_100;
  SumAccum<INT> @@count_220_100;
  SumAccum<INT> @@count_220_p_qualified;
  SumAccum<INT> @@count_220_q_qualified;
  
  
  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_20;
  SumAccum<INT> @@count_110_20_80;
  SumAccum<INT> @@count_110_80_100;
  SumAccum<INT> @@count_110_100;
  SumAccum<INT> @@count_110_p_qualified;
  SumAccum<INT> @@count_110_q_qualified;
  
  
  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_20;
  SumAccum<INT> @@count_35_20_80;
  SumAccum<INT> @@count_35_80_100;
  SumAccum<INT> @@count_35_100;
  SumAccum<INT> @@count_35_p_qualified;
  SumAccum<INT> @@count_35_q_qualified;
  
  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_20;
  SumAccum<INT> @@count_10_20_80;
  SumAccum<INT> @@count_10_80_100;
  SumAccum<INT> @@count_10_100;
  SumAccum<INT> @@count_10_p_qualified;
  SumAccum<INT> @@count_10_q_qualified;
  
  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_20;
  SumAccum<INT> @@count_other_20_80;
  SumAccum<INT> @@count_other_80_100;
  SumAccum<INT> @@count_other_100;
  SumAccum<INT> @@count_other_p_qualified;
  SumAccum<INT> @@count_other_q_qualified;
  
  

	HeapAccum<row>(10000000, volt DESC, edge_name DESC, tap_bus_name DESC) @@result_all;
  
  HeapAccum<row>(50, volt DESC, edge_name DESC, tap_bus_name DESC) @@result_part;

	MaxAccum<double> @@PI = 3.1415926535898;
	
	sub = {Substation.*};
  comp = {gridcom.*};
  T0 = {TopoND.*};	
	//aclinedotSet = {ACline_dot.*};
  
  
  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID; 
        
  aclinedotSet = SELECT t FROM sub:s - (connected_Sub_Aclinedot:e) ->:t where s.subtype != "虚拟站" and s.subtype != "其他" and s.subtype != "线端连接站"
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid;
  

  Tacline = select t from T0:s- (topo_aclinedot:e) -:t where s.island ==1
            accum
                t.@island = s.island,
                t.@bus_name = s.bus_name
            post-accum
                if (t.volt >= 500) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/1082*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/1082*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                else if (t.volt >= 330 and t.volt < 500) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/686*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/686*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                else if (t.volt >= 220 and t.volt< 330) then
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/305*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/305*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                else
                  if (abs(t.P) > 0.01) then
                    //t.@P_error_abs = abs(t.P_pf - t.Pimeas),
                    t.@P_error_pct = abs(t.P_pf - t.P)/141*100
                  else
                    //t.@P_error_abs = 0,
                    t.@P_error_pct = 0
                  end,
                  if (abs(t.Q) > 0.01) then
                    //t.@Q_error_abs = abs(t.Q_pf - t.Qimeas),
                    t.@Q_error_pct = abs(t.Q_pf - t.Q)/141*100
                  else
                    //t.@Q_error_abs = 0,
                    t.@Q_error_pct = 0
                  end
                end;
         

        Tacline = select s from aclinedotSet:s -(aclinedot_aclinedot:e) - :t
	  where s.@island == 1 and t.@island == 1 
	  accum
      double loadcapacity =0,
      double capacity = e.ratedMW,
      double normalLimit = sqrt(3)*e.volt*e.Ih/1000,
      double emerLimit = 1.1*sqrt(3)*e.volt*e.Ih/1000,
      double ldshdLimit = 1.2*sqrt(3)*e.volt*e.Ih/1000,
      if(e.ratedMW ==0) then 
          capacity = normalLimit
      end,
      if(capacity !=0) then 
        loadcapacity = abs(s.P_pf / capacity) *100
      end,
      double lineloss = abs(s.P_pf + t.P_pf),
      @@result_all+= row(e.name,  s.Subname, s.@sub_id, s.@bus_name,  s.P_pf, loadcapacity, s.@P_error_pct, s.Q_pf, s.@Q_error_pct, t.P_pf,  t.@P_error_pct, t.Q_pf,  t.@Q_error_pct, lineloss, normalLimit, emerLimit, ldshdLimit, e.volt),
      @@result_part+= row(e.name,  s.Subname, s.@sub_id, s.@bus_name,  s.P_pf, loadcapacity, s.@P_error_pct, s.Q_pf, s.@Q_error_pct, t.P_pf,  t.@P_error_pct, t.Q_pf,  t.@Q_error_pct, lineloss, normalLimit, emerLimit, ldshdLimit, e.volt),
      @@count_all += 1,
      double volt = e.volt,
      if volt >= 500 then
                  @@count_500 += 1,
                  if s.@P_error_pct <=1-p_qualified_factor then 
                     @@count_500_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <=1-q_qualified_factor then 
                     @@count_500_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_500_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_500_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_500_80_100+=1,
                    @@count_80_100+=1            
                  else if loadcapacity > 100 then
                    @@count_500_100+=1,
                    @@count_100+=1
                  end            
                
                else if volt >= 220 then
                  @@count_220+=1,
                  if s.@P_error_pct <=1-p_qualified_factor then 
                     @@count_220_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_220_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_220_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_220_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_220_80_100+=1,
                    @@count_80_100+=1            
                  else if loadcapacity > 100 then
                    @@count_220_100+=1,
                    @@count_100+=1
                  end
                  
                else if volt >= 110 then
                  @@count_110+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_110_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_110_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_110_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_110_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_110_80_100+=1,
                    @@count_80_100+=1        
                  else if loadcapacity > 100 then
                    @@count_110_100+=1,
                    @@count_100+=1
                  end
                  
                else if volt >= 34.5 then
                  @@count_35+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_35_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_35_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_35_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_35_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_35_80_100+=1,
                    @@count_80_100+=1            
                  else if loadcapacity > 100 then
                    @@count_35_100+=1,
                    @@count_100+=1
                  end
  
                else if volt >= 10 then
                  @@count_10+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_10_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_10_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_10_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_10_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_10_80_100+=1,
                    @@count_80_100+=1            
                  else if loadcapacity > 100 then
                    @@count_10_100+=1,
                    @@count_100+=1
                  end
                  
                else
                  @@count_other+=1,
                  if s.@P_error_pct <= 1-p_qualified_factor then 
                     @@count_other_p_qualified +=1,
                     @@count_p_qualified +=1 
                  end,
                  if s.@Q_error_pct <= 1-q_qualified_factor then 
                     @@count_other_q_qualified +=1,
                     @@count_q_qualified +=1
                  end,
                  if loadcapacity >= 0 and loadcapacity<=20 then
                    @@count_other_20+=1,
                    @@count_20+=1
                  else if loadcapacity > 20 and loadcapacity<=80 then
                    @@count_other_20_80+=1,
                    @@count_20_80+=1
                  else if loadcapacity > 80 and loadcapacity<=100 then
                    @@count_other_80_100+=1,
                    @@count_80_100+=1        
                  else if loadcapacity > 100 then
                    @@count_other_100+=1,
                    @@count_100+=1
                  end
                end;
 
  if return_all then
    print @@result_all;
  else
    print @@result_part;
  end;
 
  print @@count_all;
  print @@count_20;
  print @@count_20_80;
  print @@count_80_100;
  print @@count_100;
  print @@count_p_qualified;
  print @@count_q_qualified;
  
  print @@count_500;
  print @@count_500_20;
  print @@count_500_20_80;
  print @@count_500_80_100;
  print @@count_500_100;
  print @@count_500_p_qualified;
  print @@count_500_q_qualified;
  
  print @@count_220;
  print @@count_220_20;
  print @@count_220_20_80;
  print @@count_220_80_100;
  print @@count_220_100;
  print @@count_220_p_qualified;
  print @@count_220_q_qualified;
  
  
  print @@count_110;
  print @@count_110_20;
  print @@count_110_20_80;
  print @@count_110_80_100;
  print @@count_110_100;
  print @@count_110_p_qualified;
  print @@count_110_q_qualified;
  
  
  print @@count_35;
  print @@count_35_20;
  print @@count_35_20_80;
  print @@count_35_80_100;
  print @@count_35_100;
  print @@count_35_p_qualified;
  print @@count_35_q_qualified;
  
  print @@count_10;
  print @@count_10_20;
  print @@count_10_20_80;
  print @@count_10_80_100;
  print @@count_10_100;
  print @@count_10_p_qualified;
  print @@count_10_q_qualified;
  
  print @@count_other;
  print @@count_other_20;
  print @@count_other_20_80;
  print @@count_other_80_100;
  print @@count_other_100;
  print @@count_other_p_qualified;
  print @@count_other_q_qualified;
  
  
  }