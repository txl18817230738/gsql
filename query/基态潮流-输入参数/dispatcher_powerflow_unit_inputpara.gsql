CREATE QUERY dispatcher_powerflow_unit_inputpara(string companyID="113715890758877224", bool return_all=true) FOR GRAPH gsql_EMS { 
  
  TYPEDEF TUPLE <string gen_name, string gen_type, double desired_voltage, string sub_name, string sub_id, double sub_volt, double gen_P_pf, double gen_Q_pf,  double q_Up, double q_Lower, double loadfactor, string from_vertex_id, int Decision> gen;
		HeapAccum<gen>(1000000, sub_volt DESC, gen_name DESC, sub_name DESC) @@result_all;
    HeapAccum<gen>(50, sub_volt DESC, gen_name DESC, sub_name DESC) @@result_part;
    SumAccum<INT> @@count_all;
    SumAccum<int> @island;
    SumAccum<double> @sub_volt;
    SumAccum<string> @sub_name;
    SumAccum<string> @sub_id;
    SumAccum<double> @desired_voltage = 0;

  
    SetAccum<string> @@Comp_ID;
    //SumAccum<double> @P_error_pct;
    //SumAccum<double> @Q_error_pct;
    SumAccum<double> @cal_Vm = 0;
    SumAccum<double> @cal_Vm_pu = 0;
    SumAccum<double> @loadfactor;
  
  SumAccum<INT> @@count_20;
  SumAccum<INT> @@count_20_80;
  SumAccum<INT> @@count_80_100;
  SumAccum<INT> @@count_100;
  
  
  SumAccum<INT> @@count_fire;
  SumAccum<double> @@count_fire_neg;
  SumAccum<INT> @@count_fire_20;
  SumAccum<INT> @@count_fire_20_80;
  SumAccum<INT> @@count_fire_80_100;
  SumAccum<INT> @@count_fire_100;
  SumAccum<double> @@count_fire_totalcap;
  SumAccum<double> @@count_fire_generatecap;
  
  SumAccum<INT> @@count_water;
  SumAccum<double> @@count_water_neg;
  SumAccum<INT> @@count_water_20;
  SumAccum<INT> @@count_water_20_80;
  SumAccum<INT> @@count_water_80_100;
  SumAccum<INT> @@count_water_100;
  SumAccum<double> @@count_water_totalcap;
  SumAccum<double> @@count_water_generatecap;
  
  
  SumAccum<INT> @@count_wind;
  SumAccum<double> @@count_wind_neg;
  SumAccum<INT> @@count_wind_20;
  SumAccum<INT> @@count_wind_20_80;
  SumAccum<INT> @@count_wind_80_100;
  SumAccum<INT> @@count_wind_100;
  SumAccum<double> @@count_wind_totalcap;
  SumAccum<double> @@count_wind_generatecap;
  
  
  SumAccum<INT> @@count_light;
  SumAccum<double> @@count_light_neg;
  SumAccum<INT> @@count_light_20;
  SumAccum<INT> @@count_light_20_80;
  SumAccum<INT> @@count_light_80_100;
  SumAccum<INT> @@count_light_100;
  SumAccum<double> @@count_light_totalcap;
  SumAccum<double> @@count_light_generatecap;
  
  SumAccum<INT> @@count_virtual;
  SumAccum<double> @@count_virtual_neg;
  SumAccum<INT> @@count_virtual_20;
  SumAccum<INT> @@count_virtual_20_80;
  SumAccum<INT> @@count_virtual_80_100;
  SumAccum<INT> @@count_virtual_100;
  SumAccum<double> @@count_virtual_totalcap;
  SumAccum<double> @@count_virtual_generatecap;
  
  SumAccum<INT> @@count_switch;
  SumAccum<double> @@count_switch_neg;
  SumAccum<INT> @@count_switch_20;
  SumAccum<INT> @@count_switch_20_80;
  SumAccum<INT> @@count_switch_80_100;
  SumAccum<INT> @@count_switch_100;
  SumAccum<double> @@count_switch_totalcap;
  SumAccum<double> @@count_switch_generatecap;
  
  SumAccum<INT> @@count_nuclear;
  SumAccum<double> @@count_nuclear_neg;
  SumAccum<INT> @@count_nuclear_20;
  SumAccum<INT> @@count_nuclear_20_80;
  SumAccum<INT> @@count_nuclear_80_100;
  SumAccum<INT> @@count_nuclear_100;
  SumAccum<double> @@count_nuclear_totalcap;
  SumAccum<double> @@count_nuclear_generatecap;
  
  SumAccum<INT> @@count_pumping;
  SumAccum<double> @@count_pumping_neg;
  SumAccum<INT> @@count_pumping_20;
  SumAccum<INT> @@count_pumping_20_80;
  SumAccum<INT> @@count_pumping_80_100;
  SumAccum<INT> @@count_pumping_100;
  SumAccum<double> @@count_pumping_totalcap;
  SumAccum<double> @@count_pumping_generatecap;
  
  SumAccum<INT> @@count_distribution;
  SumAccum<double> @@count_distribution_neg;
  SumAccum<INT> @@count_distribution_20;
  SumAccum<INT> @@count_distribution_20_80;
  SumAccum<INT> @@count_distribution_80_100;
  SumAccum<INT> @@count_distribution_100;
  SumAccum<double> @@count_distribution_totalcap;
  SumAccum<double> @@count_distribution_generatecap;
  

  SumAccum<INT> @@count_other;
  SumAccum<double> @@count_other_neg;
  SumAccum<INT> @@count_other_20;
  SumAccum<INT> @@count_other_20_80;  
  SumAccum<INT> @@count_other_80_100; 
  SumAccum<INT> @@count_other_100;
  SumAccum<double> @@count_other_totalcap;
  SumAccum<double> @@count_other_generatecap;

  SumAccum<INT> @@count_select;
  SumAccum<INT> @@count_no;
  SumAccum<INT> @@count_fire_select;
  SumAccum<INT> @@count_fire_no;
  SumAccum<INT> @@count_water_select;
  SumAccum<INT> @@count_water_no;
  SumAccum<INT> @@count_wind_select;
  SumAccum<INT> @@count_wind_no;
  SumAccum<INT> @@count_light_select;
  SumAccum<INT> @@count_light_no;
  SumAccum<INT> @@count_nuclear_select;
  SumAccum<INT> @@count_nuclear_no;
  SumAccum<INT> @@count_pumping_select;
  SumAccum<INT> @@count_pumping_no;
  SumAccum<INT> @@count_other_select;
  SumAccum<INT> @@count_other_no;

  SumAccum<double> @@count_all_neg;
  SumAccum<double> @@count_all_totalcap;
  SumAccum<double> @@count_all_generatecap;

	
	sub = {Substation.*};
  comp = {gridcom.*};
  T0 = {TopoND.*};	
	
  
  
  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID;
  unitSet = SELECT t FROM sub:s - (connected_Sub_Unit:e) ->:t
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid,
                t.@sub_volt = s.volt;
  
  
  T_gen = SELECT s 
			FROM unitSet:s - (topo_unit:e) - TopoND:t
			where t.island == 1 
			ACCUM
			s.@desired_voltage = t.desired_volts;
			
	T_gen = SELECT s FROM T_gen:s where s.Gentype != "虚拟机组" and s.Gentype != "交换机组"
			ACCUM
      double p_rate = s.P_rate,
      double meas_overload = 0,
      if(s.P_rate != 0) THEN
           meas_overload = abs(s.P_pf/p_rate)*100
      END,
			@@result_all += gen(s.name, s.Gentype,s.@desired_voltage, s.@sub_name, s.@sub_id, s.@sub_volt, s.P_pf, s.Q_pf, s.Q_max, s.Q_min, meas_overload, s.strid, s.Decision),
      @@result_part += gen(s.name, s.Gentype,s.@desired_voltage, s.@sub_name, s.@sub_id, s.@sub_volt, s.P_pf, s.Q_pf, s.Q_max, s.Q_min, meas_overload, s.strid, s.Decision),                   
      @@count_all += 1,
      if (s.Gentype == "火电机组") then
                        @@count_fire += 1,
                        @@count_fire_totalcap += p_rate,
                  if s.P_pf <0 then 
                        @@count_fire_neg += abs(s.P_pf)
                  end, 
                        @@count_fire_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_fire_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_fire_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_fire_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_fire_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_fire_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_fire_no += 1
                  end           
                
                else if (s.Gentype == "水电机组") then
                  @@count_water+=1,
                  @@count_water_totalcap += p_rate,
                  if s.P_pf <0 then 
                        @@count_water_neg += abs(s.P_pf)
                  end, 
                        @@count_water_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_water_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_water_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_water_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_water_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_water_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_water_no += 1
                  end
                  
                else if (s.Gentype == "风电机组") then
                  @@count_wind+=1,
                  @@count_wind_totalcap += p_rate,
                  if s.P_pf <0 then 
                        @@count_wind_neg += abs(s.P_pf)
                  end, 
                        @@count_wind_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_wind_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_wind_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_wind_80_100+=1,
                    @@count_80_100+=1        
                  else if meas_overload > 100 then
                    @@count_wind_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_wind_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_wind_no += 1
                  end
                  
                else if (s.Gentype == "光伏机组") then
                  @@count_light+=1,
				  @@count_light_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_light_neg += abs(s.P_pf)
                  end, 
                        @@count_light_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_light_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_light_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_light_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_light_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_light_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_light_no += 1
                  end
  
                else if (s.Gentype == "虚拟机组") then
                  @@count_virtual+=1,
				  @@count_virtual_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_virtual_neg += abs(s.P_pf)
                  end, 
                        @@count_virtual_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_virtual_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_virtual_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_virtual_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_virtual_100+=1,
                    @@count_100+=1
                  end
				 
				 else if (s.Gentype == "交换机组") then
                  @@count_switch+=1,
				  @@count_switch_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_switch_neg += abs(s.P_pf)
                  end, 
                        @@count_switch_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_switch_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_switch_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_switch_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_switch_100+=1,
                    @@count_100+=1
                  end
				  
				 else if (s.Gentype == "核电机组") then
                  @@count_nuclear+=1,
				  @@count_nuclear_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_nuclear_neg += abs(s.P_pf)
                  end, 
                        @@count_nuclear_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_nuclear_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_nuclear_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_nuclear_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_nuclear_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_nuclear_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_nuclear_no += 1
                  end

                 else if (s.Gentype == "抽蓄机组") then
                  @@count_pumping+=1,
				  @@count_pumping_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_pumping_neg += abs(s.P_pf)
                  end, 
                        @@count_pumping_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_pumping_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_pumping_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_pumping_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_pumping_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_pumping_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_pumping_no += 1
                  end
                      
  
                else if (s.Gentype == "分布式电源") then
                  @@count_distribution+=1,
				  @@count_distribution_totalcap += p_rate,
				  if s.P_pf <0 then 
                        @@count_distribution_neg += abs(s.P_pf)
                  end, 
                        @@count_distribution_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_distribution_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_distribution_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_distribution_80_100+=1,
                    @@count_80_100+=1            
                  else if meas_overload > 100 then
                    @@count_distribution_100+=1,
                    @@count_100+=1
                  end  
  
                else if (s.Gentype == "其他机组") then
                  @@count_other+=1,
                                  @@count_other_totalcap += p_rate,
                                  if s.P_pf <0 then
                        @@count_other_neg += abs(s.P_pf)
                  end,
                        @@count_other_generatecap +=s.P_pf,
                  if meas_overload >= 0 and meas_overload<=20 then
                    @@count_other_20+=1,
                    @@count_20+=1
                  else if meas_overload > 20 and meas_overload<=80 then
                    @@count_other_20_80+=1,
                    @@count_20_80+=1
                  else if meas_overload > 80 and meas_overload<=100 then
                    @@count_other_80_100+=1,
                    @@count_80_100+=1
                  else if meas_overload > 100 then
                    @@count_other_100+=1,
                    @@count_100+=1
                  end,
                  if s.Decision == 1 then
                    @@count_select += 1,
                    @@count_other_select += 1
                  else if s.Decision == 0 then
                    @@count_no += 1,
                    @@count_other_no += 1
                  end
                end;
  
   
 
  if return_all then
    print @@result_all;
  else
    print @@result_part;
  end;
 print @@count_all;
 print @@count_20;
  print @@count_20_80;
  print @@count_80_100;
  print @@count_100;
  print @@count_all_neg;
  print @@count_all_totalcap;
  print @@count_all_generatecap;
  
  print @@count_fire;
  print @@count_fire_neg;
  print @@count_fire_20;
  print @@count_fire_20_80;
  print @@count_fire_80_100;
  print @@count_fire_100;
  print @@count_fire_totalcap;
  print @@count_fire_generatecap;
  
  print @@count_water;
  print @@count_water_neg;
  print @@count_water_20;
  print @@count_water_20_80;
  print @@count_water_80_100;
  print @@count_water_100;
  print @@count_water_totalcap;
  print @@count_water_generatecap;
  
  
  print @@count_wind;
  print @@count_wind_neg;
  print @@count_wind_20;
  print @@count_wind_20_80;
  print @@count_wind_80_100;
  print @@count_wind_100;
  print @@count_wind_totalcap;
  print @@count_wind_generatecap;
  
  
  print @@count_light;
  print @@count_light_neg;
  print @@count_light_20;
  print @@count_light_20_80;
  print @@count_light_80_100;
  print @@count_light_100;
  print @@count_light_totalcap;
  print @@count_light_generatecap;
  
  print @@count_virtual;
  print @@count_virtual_neg;
  print @@count_virtual_20;
  print @@count_virtual_20_80;
  print @@count_virtual_80_100;
  print @@count_virtual_100;
  print @@count_virtual_totalcap;
  print @@count_virtual_generatecap;
  
  print @@count_switch;
  print @@count_switch_neg;
  print @@count_switch_20;
  print @@count_switch_20_80;
  print @@count_switch_80_100;
  print @@count_switch_100;
  print @@count_switch_totalcap;
  print @@count_switch_generatecap;
  
  print @@count_nuclear;
  print @@count_nuclear_neg;
  print @@count_nuclear_20;
  print @@count_nuclear_20_80;
  print @@count_nuclear_80_100;
  print @@count_nuclear_100;
  print @@count_nuclear_totalcap;
  print @@count_nuclear_generatecap;
  
  print @@count_pumping;
  print @@count_pumping_neg;
  print @@count_pumping_20;
  print @@count_pumping_20_80;
  print @@count_pumping_80_100;
  print @@count_pumping_100;
  print @@count_pumping_totalcap;
  print @@count_pumping_generatecap;
  
  print @@count_distribution;
  print @@count_distribution_neg;
  print @@count_distribution_20;
  print @@count_distribution_20_80;
  print @@count_distribution_80_100;
  print @@count_distribution_100;
  print @@count_distribution_totalcap;
  print @@count_distribution_generatecap;
  

  print @@count_other;
  print @@count_other_neg;
  print @@count_other_20;
  print @@count_other_20_80;  
  print @@count_other_80_100; 
  print @@count_other_100;
  print @@count_other_totalcap;
  print @@count_other_generatecap;

  print @@count_select;
  print @@count_no;
  print @@count_fire_select;
  print @@count_fire_no;
  print @@count_water_select;
  print @@count_water_no;
  print @@count_wind_select;
  print @@count_wind_no;
  print @@count_light_select;
  print @@count_light_no;
  print @@count_nuclear_select;
  print @@count_nuclear_no;
  print @@count_pumping_select;
  print @@count_pumping_no;
  print @@count_other_select;
  print @@count_other_no;  
}