create query all_info_sub_run_all (STRING subId) for graph gsql_EMS {
  TYPEDEF TUPLE <string id, string cnid, string o_trans_id, string windingType, string name, double p_rate, int island, string volt, string device_type, double p, double cal_p, double mis_p, double q,  double cal_q, double mis_q, string flag, string vio_limit, string vio_type> info;
  TYPEDEF TUPLE <string name, double S> trans_info;
  TYPEDEF TUPLE <string name, string subid, string subname> acline_info;  

  ListAccum<info> @@result;
  ListAccum<trans_info> @@trans_S;
  ListAccum<acline_info> @@aclines;  
  SetAccum<string> @@acline_list;  
  SumAccum<string> @acline_name;
  SumAccum<string> @device_type;
  SumAccum<string> @edge_volt;

  SumAccum<STRING> @vio_limit;
  SumAccum<STRING> @vio_type;
  SumAccum<int> @island;
  SumAccum<string> @strid;
  SumAccum<string> @cnid;
  SumAccum<string> @o_trans_id;
  
  // load
  SumAccum<double> @cal_P  = 0;
  SumAccum<double> @cal_Q  = 0;
  SumAccum<double> @Pld = 0;
  SumAccum<double> @Qld = 0;
  SumAccum<double> @sumG  = 0;
  SumAccum<double> @sumB  = 0;
  SumAccum<double> @total_load_P = 0;
  SumAccum<double> @total_load_Q = 0;
  SumAccum<double> @T_load_P = 0;
  SumAccum<double> @T_load_Q = 0; 
  // unit
  SumAccum<double> @Pg = 0;
  SumAccum<double> @Qg = 0;
  SumAccum<double> @sumG_gen  = 0; // store for each node the total G on all of its edges
  SumAccum<double> @sumB_gen  = 0;
  SumAccum<double> @cal_gen_P = 0;
  SumAccum<double> @cal_gen_Q = 0;
  SumAccum<double> @total_gen_P = 0;
  SumAccum<double> @total_gen_Q = 0;
  SumAccum<int> @total_number_gen = 0;
  SumAccum<int> @P_nonemeas = 0;
  SumAccum<int> @Q_nonemeas = 0; 
  
  // CP
  SumAccum<double> @Q_est_real;

  // trans2
 MapAccum<string, double> @@mLineP;
 MapAccum<string, double> @@LineP;
 MapAccum<string, double> @@LineP_res;
 MapAccum<string, double> @@mLineQ;
 MapAccum<string, double> @@LineQ;
 MapAccum<string, double> @@LineQ_res;
 SumAccum<double> @QBias;
 MapAccum<int, double> @@acline_QBias;
 MapAccum<int, ListAccum<double>> @QBiasMap;
  
 OrAccum<bool> @isHighVolt;
 


//get Q measurement error
  aclinedotSet = {ACline_dot.*};
  measSet = {meas.*};
  T0 = {TopoND.*};

  AclineSet = SELECT s
            FROM measSet:s - (Meas_AClinedot:e) -> :t
            ACCUM
            t.@QBias = s.meas_B;

        X = select s from aclinedotSet:s -(aclinedot_aclinedot:e) - :t
                accum
                        int id = e.id,
                        if s.id == e.I_mRID then
                                @@acline_QBias += (id -> s.@QBias/100)
                        else
                                @@acline_QBias += (-id -> s.@QBias/100)
                        end;
       X2 = select s from aclinedotSet:s -(aclinedot_aclinedot_reverse:e) - :t
                accum
                        int id = e.id,
                        if s.id == e.I_mRID then
                                @@acline_QBias += (id -> s.@QBias/100)
                        else
                                @@acline_QBias += (-id -> s.@QBias/100)
                        end;

        update_edge = select s
              from T0:s-(topo_connect:e)->:t
              where s.island == 1 and t.island == 1
                ACCUM
                CASE WHEN (e.device_type == "AC传输线") THEN
                        s.@QBiasMap += (t.exId -> GetMapValuesFromList(@@acline_QBias, e.key_list))
                END;

	
  

  start = {Substation.*};
  start = select s from start:s where s.strid == subId;
  equips(ANY) = SELECT t
                FROM start:sub - ((connected_Sub_Bus|connected_Sub_Load|connected_Sub_Unit|connected_Sub_Trans_two|connected_Sub_Trans_three|connected_Sub_Compensator_P |connected_Sub_Compensator_S|connected_Sub_Aclinedot):e) ->:t;

  
  temp_bus = select s from equips:s - (connected_Bus_CN:e) - CN:t
             accum s.@cnid = t.strid;
  T_bus = SELECT s FROM equips:s - (topo_bus:e) - TopoND:t
          ACCUM 
                s.@island = t.island,
                s.@vio_limit = ToString(t.lo_V)+"/"+ToString(t.up_V),
		string vio_type = "",
		if (t.PF_Vm >= t.up_V) then s.@vio_type = "高电压越限"
		else if (t.PF_Vm <= t.lo_V) then s.@vio_type = "低电压越限"
		else s.@vio_type = "正常"
		end
          post-accum
	        @@result += info(s.strid, s.@cnid, "", "", s.name, 0, s.@island, ToString(s.volt),"母线", s.Pimeas, s.V, s.Pimeas-s.V, 0,0,0,"",s.@vio_limit,s.@vio_type);
 
  T_unit = SELECT t FROM equips:s - (topo_unit:e) - TopoND:t
         where s.off == 0;
  T_unit = SELECT s 
	  from T_unit: s -(topo_connect:e)->TopoND:t 
	  accum 
        double newG = 0,
        double newB = 0,
		double tap_ratio = abs(e.transformer_final_turns_ratio),
		double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),
		
		case when e.transformer_final_turns_ratio == 0 then
  		    s.@sumG_gen += e.G, 
            s.@sumB_gen += -1*e.B + e.hB,
			s.@cal_gen_P += s.SE_Vm*t.SE_Vm * (-1*e.G*cos(s.SE_Va-t.SE_Va) + e.B * sin(s.SE_Va-t.SE_Va)),
			s.@cal_gen_Q += s.SE_Vm*t.SE_Vm * (-1*e.G*sin(s.SE_Va-t.SE_Va) - e.B * cos(s.SE_Va-t.SE_Va))
		when e.transformer_final_turns_ratio > 0 then
			s.@sumG_gen += e.G,
            s.@sumB_gen += -1*e.B + e.hB, // sqrt
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_gen_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va-t.SE_Va)),
			s.@cal_gen_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va-t.SE_Va)) 
		else
            s.@sumG_gen += e.G*tap_ratio_square, 
            s.@sumB_gen += -1*e.B*tap_ratio_square + e.hB,	
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_gen_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va-t.SE_Va)),
			s.@cal_gen_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va-t.SE_Va))    
        end
 		post-accum
		    s.@cal_gen_P += s.SE_Vm*s.SE_Vm*s.@sumG_gen,
			s.@cal_gen_Q += (-1) * s.SE_Vm*s.SE_Vm*s.@sumB_gen;
  T_unit = SELECT t
			FROM T_unit:s - (topo_unit:e) - unit:t
                        where t.off == 0
			ACCUM
                        if (t.Pimeas == 0) then
                                s.@P_nonemeas += 1
                        end,
                        if (t.Qimeas == 0) then
                                s.@Q_nonemeas += 1                 
                        end,
                        s.@total_number_gen += 1,
                        s.@total_gen_P += t.Pimeas,
                        s.@total_gen_Q += t.Qimeas;

  T_unit = SELECT s
		    FROM T_unit:s - (topo_unit:e) - TopoND:t
                    where s.off == 0
		    accum
			s.@island = t.island,
                        if (t.@total_gen_P != 0 and t.@P_nonemeas == 0) then
                                s.@Pg = s.Pimeas/(t.@total_gen_P) * t.@cal_gen_P * 100
                        else
                                s.@Pg = t.@cal_gen_P/(t.@total_number_gen) * 100
                        end,
                        if (t.@total_gen_Q != 0 and t.@Q_nonemeas == 0) then
                                s.@Qg = s.Qimeas/(t.@total_gen_Q) * t.@cal_gen_Q * 100
                        else
                                s.@Qg = t.@cal_gen_Q/(t.@total_number_gen) * 100
                        end,
		      if (t.PF_Vm >= t.up_V) then s.@vio_type = "高电压越限"
		      else if (t.PF_Vm <= t.lo_V) then s.@vio_type = "低电压越限"
		      else s.@vio_type = "正常"
		      end;

  T_unit = SELECT s
			 FROM T_unit:s
                         where s.off == 0
			 POST-ACCUM
			 @@result += info(s.strid, "", "", "", s.name, s.P_rate, s.@island, ToString(s.volt), "机组", s.Pimeas, s.P, s.Pimeas - s.P, s.Qimeas, s.Q, s.Qimeas - s.Q, "", ToString(s.P_rate), s.@vio_type);


  T_load = SELECT t FROM equips:s - (topo_load:e) - TopoND:t
                        WHERE t.island == 1;
  T_load = SELECT s
          from T_load: s -(topo_connect:e)->TopoND:t
          where s.island == 1 and t.island == 1 
	  accum 
        double newG = 0,
        double newB = 0,
		double tap_ratio = abs(e.transformer_final_turns_ratio),
		double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),
		
		case when e.transformer_final_turns_ratio == 0 then
  		    s.@sumG += e.G, 
            s.@sumB += -1*e.B + e.hB,
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*e.G*cos(s.SE_Va-t.SE_Va) + e.B * sin((s.SE_Va-t.SE_Va))),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*e.G*sin(s.SE_Va-t.SE_Va) - e.B * cos(s.SE_Va-t.SE_Va))
		when e.transformer_final_turns_ratio > 0 then
			s.@sumG += e.G,
            s.@sumB += -1*e.B + e.hB, // sqrt
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va-t.SE_Va)),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va-t.SE_Va)) 
		else
            s.@sumG += e.G*tap_ratio_square, 
            s.@sumB += -1*e.B*tap_ratio_square + e.hB,	
			newG = e.G*abs(tap_ratio),
			newB = e.B*abs(tap_ratio),
			s.@cal_P += s.SE_Vm*t.SE_Vm * (-1*newG*cos(s.SE_Va-t.SE_Va) + newB * sin(s.SE_Va-t.SE_Va)),
			s.@cal_Q += s.SE_Vm*t.SE_Vm * (-1*newG*sin(s.SE_Va-t.SE_Va) - newB * cos(s.SE_Va-t.SE_Va))    
        end
 		post-accum
		    s.@cal_P += s.SE_Vm*s.SE_Vm*s.@sumG,
			s.@cal_Q += (-1) * s.SE_Vm*s.SE_Vm*s.@sumB;


        T_load = SELECT t
                        FROM T_load:s - (topo_load:e) - l_oad:t
                        WHERE s.island == 1 and t.off == 0
                        ACCUM
                        s.@T_load_P += abs(t.Pimeas),
                        s.@T_load_Q += abs(t.Qimeas),
                        s.@total_load_P += 1,
                        s.@total_load_Q += 1;

        
	T_load = SELECT s
		    FROM T_load:s - (topo_load:e) - TopoND:t
                    where t.island == 1 and s.off == 0
		    accum
			s.@island = t.island,
                        IF (t.@T_load_P == 0) THEN
                                s.@Pld = -1/(t.@total_load_P) * t.@cal_P * 100
                        ELSE
                                s.@Pld = -abs(s.Pimeas)/(t.@T_load_P) * t.@cal_P * 100
                        END,
                        IF (t.@T_load_Q == 0) THEN
                                s.@Qld = -1/(t.@total_load_Q) * t.@cal_Q * 100
                        ELSE
                                s.@Qld = -abs(s.Qimeas)/(t.@T_load_Q) * t.@cal_Q * 100
                        END,
			s.@vio_limit = "999900",
		      if (t.PF_Vm >= t.up_V) then s.@vio_type = "高电压越限"
		      else if (t.PF_Vm <= t.lo_V) then s.@vio_type = "低电压越限"
		      else s.@vio_type = "正常"
		      end;		
	T_load = SELECT s
		 FROM T_load:s
		 POST-ACCUM		
		 IF (s.Pimeas != 0) THEN
			IF ((abs(s.Pimeas - s.@Pld)/s.Pimeas) >= 0.1) THEN
				s.@Pld = s.Pimeas - (abs(s.Pimeas - s.@Pld)/(s.Pimeas - s.@Pld)) * 0.05 * s.Pimeas
			END
		 END,
		 IF (s.Qimeas != 0) THEN
			IF ((abs(s.Qimeas - s.@Qld)/s.Qimeas) >= 0.1) THEN
				s.@Qld = s.Qimeas - (abs(s.Qimeas - s.@Qld)/(s.Qimeas - s.@Qld)) * 0.05 * s.Qimeas
			END
		 END,
                 @@result += info(s.strid, "", "", "", s.name, s.P, s.@island, ToString(s.volt), "负荷", s.Pimeas, s.P, s.Pimeas - s.P, s.Qimeas, s.Q, s.Qimeas - s.Q,"", s.@vio_limit, s.@vio_type);		 

  T_trans2 = SELECT t FROM equips:s - (topo_Tx_Two:e) - TopoND:t
	     post-accum
		 @@trans_S+=trans_info(s.name, s.S);

  T_trans2 = select s 
	from T_trans2:s -(topo_connect:e)->TopoND:t
	accum
	double tap_ratio = abs(e.transformer_final_turns_ratio),
	double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),			
	case when (e.transformer_final_turns_ratio == 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * (e.G*cos(s.SE_Va - t.SE_Va) + (-e.B)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * (e.G*sin(s.SE_Va - t.SE_Va) - (-e.B)*cos(s.SE_Va - t.SE_Va))
	when (e.transformer_final_turns_ratio > 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	else
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G * tap_ratio_square - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B * tap_ratio_square) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	end;
	
  T_trans2_1 = select s
        from T_trans2:s -(topo_connect:e)->TopoND:t
        WHERE e.reverse == -1
        accum
        FOREACH i in range [0, e.X.size()-1] DO
            @@mLineP += (e.edge_name.get(i) -> e.M_P_TLPF_list.get(i)*100),
            case when (e.transformer_final_turns_ratio == 0) then
                @@LineP += ( e.edge_name.get(i) -> (s.SE_Vm * s.SE_Vm * e.G_list.get(i) - s.SE_Vm * t.SE_Vm * (e.G_list.get(i)*cos(s.SE_Va - t.SE_Va) + (-e.B_list.get(i)*sin(s.SE_Va - t.SE_Va))))*100) // To calculate the active power based on the G/B on each branch rather using the average value
            else
                @@LineP += (e.edge_name.get(i) -> e.P_TLPF/e.X.size()*100)
            end,
	    IF e.M_P_TLPF_list.get(i) != 0 THEN
                case when(e.transformer_final_turns_ratio == 0) then
                    @@LineP_res += (e.edge_name.get(i) -> ((s.SE_Vm * s.SE_Vm * e.G_list.get(i) - s.SE_Vm * t.SE_Vm * (e.G_list.get(i)*cos(s.SE_Va - t.SE_Va) + (-e.B_list.get(i)*sin(s.SE_Va - t.SE_Va))))-e.M_P_TLPF_list.get(i))*100)
                else
                    @@LineP_res += (e.edge_name.get(i) -> (e.P_TLPF/e.X.size()-e.M_P_TLPF_list.get(i))*100)
                end
	   ELSE
		@@LineP_res += (e.edge_name.get(i) -> 0)
	   END,
	   @@mLineQ += (e.edge_name.get(i) -> e.M_Q_TLPF_list.get(i)*100),
	   if (e.transformer_final_turns_ratio == 0) then
                @@LineQ += (e.edge_name.get(i) -> (- s.SE_Vm * s.SE_Vm * (-e.B_list.get(i)) - s.SE_Vm * t.SE_Vm * (e.G_list.get(i)*sin(s.SE_Va - t.SE_Va) - (-e.B_list.get(i))*cos(s.SE_Va - t.SE_Va)))*100) // To calculate the active power based on the G/B on each branch rather using the average value
            else
                @@LineQ += (e.edge_name.get(i) -> e.Q_TLPF/e.X.size()*100)
            end,
	   IF e.M_Q_TLPF_list.get(i) != 0 THEN
                case when (e.transformer_final_turns_ratio == 0) then
                    @@LineQ_res += (e.edge_name.get(i) -> ((- s.SE_Vm * s.SE_Vm * (-e.B_list.get(i)) - s.SE_Vm * t.SE_Vm * (e.G_list.get(i)*sin(s.SE_Va - t.SE_Va) - (-e.B_list.get(i))*cos(s.SE_Va - t.SE_Va)))-e.M_Q_TLPF_list.get(i))*100)
                else
                    @@LineQ_res += (e.edge_name.get(i) -> (e.Q_TLPF/e.X.size()-e.M_Q_TLPF_list.get(i))*100)
                end
           ELSE
		@@LineQ_res += (e.edge_name.get(i) -> 0)
	   END
	END;
  

  
  trans2Set = SELECT s FROM equips:s - (topo_Tx_Two:e) - TopoND:t;
  
  //log(true,"beforetrans2Set",trans2Set);
  trans2Set1 = SELECT s from trans2Set:s - ((txI_txJ_transformerline|txJ_txI_transformerline):e)-:t
		ACCUM
	if(s.base_value > t.base_value) then
		s.@isHighVolt = true,
		s.@edge_volt = ToString(s.base_value)+"-"+ToString(t.base_value) 
	else
		t.@isHighVolt = true,
		s.@edge_volt = ToString(t.base_value)+"-"+ToString(s.base_value)
	end;
  
  //log(true,"aftertrans2Set",trans2Set);
  trans2Set1 = SELECT s from trans2Set1:s -(topo_Tx_Two:e)- TopoND:t
	ACCUM
		s.@island = t.island;
    //s.@edge_volt = t.@edge_volt;
  
  trans2Set1 = SELECT s from trans2Set1:s - ((txI_txJ_transformerline|txJ_txI_transformerline):e) - two_port_transformer:t
  ACCUM
  double P_res = abs(s.P_pf - s.Pimeas),
  double Q_res = abs(s.Q_pf - s.Qimeas),
  string vio_limit = ToString(s.S),//待确认
  string vio_type = "正常",
  double line_Q1 = s.S,
  double line_Q2 = 1.1*line_Q1,
  double line_Q3 = 1.2*line_Q1,
  double MVA=0,
  MVA=sqrt(s.P_pf*s.P_pf+s.Q_pf*s.Q_pf),
  IF (line_Q1 < 10) THEN
     line_Q1 = 9999,
     line_Q2 = 9999,
     line_Q3 = 9999
  END,
  case when (MVA>=line_Q1 and MVA<line_Q2) then
       vio_type = "1级越限"
       when (MVA>=line_Q2 and MVA<line_Q3) then
       vio_type = "2级越限"
       when (MVA>=line_Q3) then
       vio_type = "3级越限"
  end,
  
  if(s.@isHighVolt) then
	@@result+= info(s.strid, "", t.strid, s.WindingType, s.name, 0, s.@island, s.@edge_volt, "双绕组变压器",s.Pimeas, s.P, P_res,s.Qimeas, s.Q, Q_res,"首", vio_limit, vio_type)
  else
	@@result+= info(s.strid, "", t.strid, s.WindingType, s.name, 0, s.@island, s.@edge_volt, "双绕组变压器",s.Pimeas, s.P, P_res,s.Qimeas, s.Q, Q_res,"末", vio_limit, vio_type)
    
  end;

  T_trans3 = SELECT t FROM equips:s - (topo_Tx_Three:e) - TopoND:t
             post-accum
			 @@trans_S+=trans_info(s.name, s.S);
  
  T_trans3 = select s 
	from T_trans3:s -(topo_connect:e)->TopoND:t
	accum
	double tap_ratio = abs(e.transformer_final_turns_ratio),
	double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),			
	case when (e.transformer_final_turns_ratio == 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * (e.G*cos(s.SE_Va - t.SE_Va) + (-e.B)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * (e.G*sin(s.SE_Va - t.SE_Va) - (-e.B)*cos(s.SE_Va - t.SE_Va))
	when (e.transformer_final_turns_ratio > 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	else
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G * tap_ratio_square - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B * tap_ratio_square) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	end;	
  
  trans3Set = SELECT s FROM equips:s - (topo_Tx_Three:e) - TopoND:t;
  
  trans3Set = SELECT s from trans3Set:s - (topo_Tx_Three:e) -  TopoND:t
  ACCUM
	s.@island = t.island;
	
  trans3Set = SELECT s from trans3Set:s - (neutral_three:e) - neutral_point:t
  ACCUM
	string vio_limit = ToString(s.S),
	string vio_type = "正常",
	double P_res = abs(s.P_pf - s.Pimeas),
	double Q_res = abs(s.Q_pf - s.Qimeas),
	string vio_limit1 = ToString(s.S),//待确认
	string vio_type1 = "正常",
	double line_Q1 = s.S,
	double line_Q2 = 1.1*line_Q1,
	double line_Q3 = 1.2*line_Q1,
	double MVA=0,
	MVA=sqrt(s.P_pf*s.P_pf+s.Q_pf*s.Q_pf),
	IF (line_Q1 < 10) THEN
     line_Q1 = 9999,
     line_Q2 = 9999,
     line_Q3 = 9999
	END,
	case when (MVA>=line_Q1 and MVA<line_Q2) then
       vio_type = "1级越限"
       when (MVA>=line_Q2 and MVA<line_Q3) then
       vio_type = "2级越限"
       when (MVA>=line_Q3) then
       vio_type = "3级越限"
	end,
  @@result+= info(s.strid, "", t.strid, s.WindingType, s.name, 0, s.@island, ToString(s.volt), "三绕组变压器",s.Pimeas, s.P, P_res,s.Qimeas, s.Q, Q_res,"", vio_limit, vio_type);
  

  T_aclinedot = SELECT t FROM equips:s - (topo_aclinedot:e) - TopoND:t;	
  T_aclinedot = select s 
	from T_aclinedot:s -(topo_connect:e)->TopoND:t
	accum
	double tap_ratio = abs(e.transformer_final_turns_ratio),
	double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),			
	case when (e.transformer_final_turns_ratio == 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * (e.G*cos(s.SE_Va - t.SE_Va) + (-e.B)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * (e.G*sin(s.SE_Va - t.SE_Va) - (-e.B)*cos(s.SE_Va - t.SE_Va)) + e.from_CP
	when (e.transformer_final_turns_ratio > 0) then
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	else
		e.P_TLPF = s.SE_Vm * s.SE_Vm * e.G * tap_ratio_square - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos(s.SE_Va - t.SE_Va) + (-e.B*tap_ratio)*sin(s.SE_Va - t.SE_Va)),
		e.Q_TLPF = - s.SE_Vm * s.SE_Vm * (-e.B * tap_ratio_square) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin(s.SE_Va - t.SE_Va) - (-e.B*tap_ratio)*cos(s.SE_Va - t.SE_Va))
	end;	
 
  newAclineSet = SELECT s FROM equips:s - (topo_aclinedot:e) - TopoND:t;
	
  newAclineSet = select s from newAclineSet:s - (topo_aclinedot:e) - TopoND:t
	//where t.island == 1
		accum
		  s.@island = t.island,
		  s.@device_type = "AC传输线";

            
		Tacline = select s from newAclineSet:s -((aclinedot_aclinedot|aclinedot_aclinedot_reverse):e) - :t
				accum 
                    //string vio_limit = " ",
          log(true,"value_test",e.name,s.volt,e.Ih),
					string vio_type = "正常",
					double P_res = abs(s.P - s.Pimeas),
					double Q_res = abs(s.Q - s.Qimeas),
					double normalLimit = sqrt(3)*s.volt*e.Ih/1000,
          double emerLimit = 1.1*sqrt(3)*s.volt*e.Ih/1000,
          double ldshdLimit = 1.2*sqrt(3)*s.volt*e.Ih/1000,
					string vio_limit =ToString(normalLimit)+"/"+ToString(emerLimit)+"/"+ToString(ldshdLimit),
					double MVA=0,
					MVA=sqrt(s.P_pf*s.P_pf+s.Q_pf*s.Q_pf),
					
					IF (e.Ih > 0.001) THEN
					case when (MVA>=normalLimit and MVA<emerLimit) then
	                         vio_type = "1级越限"
	                   when (MVA>=emerLimit and MVA<ldshdLimit) then
	                         vio_type = "2级越限"
	                   when (MVA>=ldshdLimit) then
	                         vio_type = "3级越限"
	                   end
		      end,
                      @@acline_list += e.name,
		      @@result+= info(s.strid, "", "", "", e.name, normalLimit, s.@island, ToString(s.volt), s.@device_type,s.Pimeas, s.P, P_res,s.Qimeas, s.Q, Q_res,"", vio_limit, vio_type); 
  
  PRINT @@result;
  print @@trans_S;
  acline_set = {ACline_dot.*};
  acline_set = SELECT s FROM acline_set:s - ((aclinedot_aclinedot|aclinedot_aclinedot_reverse):e) - ACline_dot:t
               where s.Substation != subId and e.name in @@acline_list
                           accum
                           s.@acline_name = e.name;
  acline_set = SELECT s FROM acline_set:s - (connected_Aclinedot_Sub:e) - Substation:t
               accum
               @@aclines+=acline_info(s.@acline_name, s.Substation, t.name);
  print @@aclines;
  //print equips;
  //print newAclineSet;
  //print trans2Set;
  //print trans2Set1;
}