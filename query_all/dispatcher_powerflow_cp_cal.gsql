CREATE QUERY dispatcher_powerflow_cp_cal(string companyID="113715890758877224", bool return_all=true, double q_qualified_factor) FOR GRAPH gsql_EMS { 
  TYPEDEF TUPLE<string CP_name, string area, string sub_name, string sub_id, string bus_name, double volt, double desired_volts, double Q_pf, double q_pct> CP_list;
		
	
	SumAccum<INT> @@count_all;
  SumAccum<INT> @island;
	SumAccum<string> @sub_name;
	SumAccum<string> @sub_id;
  SumAccum<string> @bus_name;
  SumAccum<string> @area;
  //SumAccum<double> @Q;
  SumAccum<double> @Q_error_pct;
	HeapAccum<CP_list>(10000000, volt DESC, CP_name DESC, sub_name DESC) @@result;
	HeapAccum<CP_list>(50, volt DESC, CP_name DESC, sub_name DESC) @@result_part;
	SetAccum<string> @@Comp_ID;
  
	SumAccum<INT> @@count_negative;
	SumAccum<INT> @@count_zero;
	SumAccum<INT> @@count_positive;
  SumAccum<INT> @@count_q_qualified;
	
  
  
	SumAccum<INT> @@count_500;
	SumAccum<INT> @@count_500_negative;
	SumAccum<INT> @@count_500_zero;
	SumAccum<INT> @@count_500_positive;
  SumAccum<INT> @@count_500_q_qualified;
	
  
	SumAccum<INT> @@count_220;
	SumAccum<INT> @@count_220_negative;
	SumAccum<INT> @@count_220_zero;
	SumAccum<INT> @@count_220_positive;
  SumAccum<INT> @@count_220_q_qualified;
  
  SumAccum<INT> @@count_110;
	SumAccum<INT> @@count_110_negative;
	SumAccum<INT> @@count_110_zero;
	SumAccum<INT> @@count_110_positive;
  SumAccum<INT> @@count_110_q_qualified;
  
	SumAccum<INT> @@count_35;
	SumAccum<INT> @@count_35_negative;
	SumAccum<INT> @@count_35_zero;
	SumAccum<INT> @@count_35_positive;
  SumAccum<INT> @@count_35_q_qualified;
  
	SumAccum<INT> @@count_10;
	SumAccum<INT> @@count_10_negative;
	SumAccum<INT> @@count_10_zero;
	SumAccum<INT> @@count_10_positive;
  SumAccum<INT> @@count_10_q_qualified;
	
  
	SumAccum<INT> @@count_other;
	SumAccum<INT> @@count_other_negative;
	SumAccum<INT> @@count_other_zero;
	SumAccum<INT> @@count_other_positive;
  SumAccum<INT> @@count_other_q_qualified;

	T0 = {TopoND.*};
	sub = {Substation.*};
	comp = {gridcom.*};


  start_comp = select s from comp:s where s.id == companyID accum @@Comp_ID+= s.id;

  WHILE(start_comp.size()>0) DO
    start_comp = select t from start_comp:s-(gridcom_gridcom:e)->:t where t.id != s.parent_id accum @@Comp_ID+= t.id;
  END;

  sub = select t from comp:s-(connected_grid_sub:e)->:t where s.id in @@Comp_ID
                accum 
                    t.@area =s.name;
	
  cpSet = SELECT t FROM sub:s - (connected_Sub_Compensator_P:e) ->:t
                accum
                t.@sub_name = s.name,
                t.@sub_id = s.strid,
                t.@area = s.@area;
  /** 
  T_CP = SELECT s
	     FROM cpSet:s - (topo_compensatorP:e) - TopoND:t
		 WHERE t.island == 1
		 ACCUM 
		 s.@Q = t.PF_Vm * t.PF_Vm *s.Q_rate, 
		 s.@bus_name = t.bus_name,
		 s.@sub_name = t.Sub,
     if s.Q_rate !=0 then 
        s.@Q_pct = s.@Q / s.Q_rate 
     else 
        s.@Q_pct =0 
     end;
     **/
  
  T_CP = SELECT s
	     FROM cpSet:s - (topo_compensatorP:e) - TopoND:t
		 WHERE t.island == 1
		 ACCUM
     s.@island = t.island,
     s.@bus_name = t.bus_name
		 //s.@Q = t.PF_Vm * t.PF_Vm *s.Q_rate
     post-accum
			 if (s.volt >= 500) then
                  if (abs(s.Q) > 0.01) then
                    s.@Q_error_pct = abs(s.Q_pf - s.Q)/1082*100
                  else
                    s.@Q_error_pct = 0
                  end
                else if (s.volt >= 330 and s.volt < 500) then
				  if (abs(s.Q) > 0.01) then
                    s.@Q_error_pct = abs(s.Q_pf - s.Q)/686*100
                  else
                    s.@Q_error_pct = 0
                  end
                else if (s.volt >= 220 and s.volt< 330) then
                  if (abs(s.Q) > 0.01) then
                    s.@Q_error_pct = abs(s.Q_pf - s.Q)/305*100
                  else
                    s.@Q_error_pct = 0
                  end
				else
                  if (abs(s.Q) > 0.01) then
                    s.@Q_error_pct = abs(s.Q_pf - s.Q)/141*100
                  else
                    s.@Q_error_pct = 0
                  end
                end;
  
  T_CP = SELECT s
	     FROM T_CP:s	 
		 POST-ACCUM
		@@result += CP_list(s.name, s.@area, s.@sub_name, s.@sub_id,s.@bus_name, s.volt, s.base_value, s.Q, s.@Q_error_pct),
    @@result_part += CP_list(s.name, s.@area, s.@sub_name, s.@sub_id,s.@bus_name, s.volt, s.base_value, s.Q, s.@Q_error_pct),
     @@count_all += 1,
			double volt = s.volt,
			if volt >= 500 then
				 @@count_500 += 1,
         if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_500_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_500_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_500_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_500_positive+=1,
                    @@count_positive+=1            
                  end
			else if volt >= 220 then
                  @@count_220 += 1,
          if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_220_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_220_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_220_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_220_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else if volt >= 110 then
                  @@count_110 += 1,
                  if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_110_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_110_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_110_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_110_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else if volt >= 34.5 then
                  @@count_35+=1,
                  if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_35_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_35_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_35_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_35_positive+=1,
                    @@count_positive+=1            
                  end
  
                else if volt >= 10 then
                  @@count_10+=1,
                  if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_10_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_10_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_10_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_10_positive+=1,
                    @@count_positive+=1            
                  end
                  
                else
                  @@count_other+=1,
          if s.@Q_error_pct <= 1 - q_qualified_factor then 
            @@count_other_q_qualified +=1,
            @@count_q_qualified +=1 
         end,
				 if s.Q < 0 then
                    @@count_other_negative+=1,
                    @@count_negative+=1
                  else if s.Q == 0 then
                    @@count_other_zero+=1,
                    @@count_zero+=1
                  else if s.Q >0 then
                    @@count_other_positive+=1,
                    @@count_positive+=1            
                  end
              end;
			
	
						
	if return_all then
    print @@result;
  else
    print @@result_part;
  end;
  print @@count_all;
	
	print @@count_negative;
	print @@count_zero;
	print @@count_positive;
  print @@count_q_qualified;
	
  
  
	print @@count_500;
	print @@count_500_negative;
	print @@count_500_zero;
	print @@count_500_positive;
  print @@count_500_q_qualified;
	
  
	print @@count_220;
	print @@count_220_negative;
	print @@count_220_zero;
	print @@count_220_positive;
  print @@count_220_q_qualified;
  
  
    print @@count_110;
	print @@count_110_negative;
	print @@count_110_zero;
	print @@count_110_positive;
  print @@count_110_q_qualified;
  
	print @@count_35;
	print @@count_35_negative;
	print @@count_35_zero;
	print @@count_35_positive;
  print @@count_35_q_qualified;
  
	print @@count_10;
	print @@count_10_negative;
	print @@count_10_zero;
	print @@count_10_positive;
  print @@count_10_q_qualified;
	
  
	print @@count_other;
	print @@count_other_negative;
	print @@count_other_zero;
	print @@count_other_positive;
  print @@count_other_q_qualified;
  
  
}