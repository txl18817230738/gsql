CREATE QUERY dispatcher_powerflow_current_exceeding_analysis(bool return_all=true) FOR GRAPH gsql_EMS { 
 TYPEDEF TUPLE <string edge_name, string area, string Line_trans, string from_sub, string from_subid, string to_sub, string to_subid, double MVAmax1, double MVAmax2,double MVAmax3,double mva_se, double mva_pf, string vio_type_se, string vio_type_pf, double volt ,bool has_se_exceed, bool has_pf_exceed> branch_vio;
	
	
	ListAccum<branch_vio> @@branchVioList;
  HeapAccum<branch_vio>(10000000, edge_name DESC, from_sub DESC) @@result;
	HeapAccum<branch_vio>(50, edge_name DESC, from_sub DESC) @@result_part;
	MaxAccum<double> @@PI = 3.1415926535898;
  SumAccum<string> @subid;
  //SumAccum<int> @island;
  SumAccum<string> @area;
  OrAccum<bool> @has_se_exceed;
  OrAccum<bool> @has_pf_exceed;
  
  SumAccum<INT> @@count_all;
  
  SumAccum<INT> @@count_se_exceed;
  SumAccum<INT> @@count_pf_exceed;
  SumAccum<INT> @@count_both_exceed;
  
  
  SumAccum<INT> @@count_500;
  SumAccum<INT> @@count_500_se_exceed;
  SumAccum<INT> @@count_500_pf_exceed;
  SumAccum<INT> @@count_500_both_exceed;
  
  SumAccum<INT> @@count_220;
  SumAccum<INT> @@count_220_se_exceed;
  SumAccum<INT> @@count_220_pf_exceed;
  SumAccum<INT> @@count_220_both_exceed;
  
  
  SumAccum<INT> @@count_110;
  SumAccum<INT> @@count_110_se_exceed;
  SumAccum<INT> @@count_110_pf_exceed;
  SumAccum<INT> @@count_110_both_exceed;
  
  SumAccum<INT> @@count_35;
  SumAccum<INT> @@count_35_se_exceed;
  SumAccum<INT> @@count_35_pf_exceed;
  SumAccum<INT> @@count_35_both_exceed;
  
  SumAccum<INT> @@count_10;
  SumAccum<INT> @@count_10_se_exceed;
  SumAccum<INT> @@count_10_pf_exceed;
  SumAccum<INT> @@count_10_both_exceed;
  
  SumAccum<INT> @@count_other;
  SumAccum<INT> @@count_other_se_exceed;
  SumAccum<INT> @@count_other_pf_exceed;
  SumAccum<INT> @@count_other_both_exceed;

	T0 = {TopoND.*};
  sub ={Substation.*};
  
  sub = select s from sub:s -(connected_grid_sub)-:t 
              ACCUM 
                s.@area = t.name;

  Tsub = select s from T0:s-(topoid_subid:e)-:t
         accum
         s.@subid = t.strid,
         s.@area = t.@area;
	
	T1 = SELECT s 
	  from T0: s -(topo_connect:e)->TopoND:t 
	  WHERE s.island == 1 and t.island == 1 and e.reverse == 1
	  accum 
	  double se_p=0,
	  double se_q=0,
	  IF e.R.size() != 0 THEN 
	  double tap_ratio = abs(e.transformer_final_turns_ratio),
	  double tap_ratio_square = abs((e.transformer_final_turns_ratio)*(e.transformer_final_turns_ratio)),
		case when (e.transformer_final_turns_ratio == 0) then
				e.P_TLPF = s.PF_Vm * t.PF_Vm * sin((s.PF_Va - t.PF_Va)*@@PI/180)* e.B + (s.PF_Vm*s.PF_Vm - s.PF_Vm*t.PF_Vm*cos((s.PF_Va - t.PF_Va)*@@PI/180)) * e.G,
        se_p = s.SE_Vm * t.SE_Vm * sin((s.SE_Va - t.SE_Va)*@@PI/180)* e.B + (s.SE_Vm*s.SE_Vm - s.SE_Vm*t.SE_Vm*cos((s.SE_Va - t.SE_Va)*@@PI/180)) * e.G,
				e.Q_TLPF = - s.PF_Vm * s.PF_Vm * (-e.B + 0.5*e.hB) - s.PF_Vm * t.PF_Vm * (e.G*sin((s.PF_Va - t.PF_Va)*@@PI/180) - (-e.B)*cos((s.PF_Va - t.PF_Va)*@@PI/180)),
        se_q = - s.SE_Vm * s.SE_Vm * (-e.B + 0.5*e.hB) - s.SE_Vm * t.SE_Vm * (e.G*sin((s.SE_Va - t.SE_Va)*@@PI/180) - (-e.B)*cos((s.SE_Va - t.SE_Va)*@@PI/180))
			when (e.transformer_final_turns_ratio > 0) then
				e.P_TLPF = s.PF_Vm * s.PF_Vm * e.G - s.PF_Vm * t.PF_Vm * ((e.G*tap_ratio)*cos((s.PF_Va - t.PF_Va)*@@PI/180) + (-e.B*tap_ratio)*sin((s.PF_Va - t.PF_Va)*@@PI/180)),
        se_p = s.SE_Vm * s.SE_Vm * e.G - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos((s.SE_Va - t.SE_Va)*@@PI/180) + (-e.B*tap_ratio)*sin((s.SE_Va - t.SE_Va)*@@PI/180)),
				e.Q_TLPF = - s.PF_Vm * s.PF_Vm * (-e.B + 0.5*e.hB)  - s.PF_Vm * t.PF_Vm * ((e.G*tap_ratio)*sin((s.PF_Va - t.PF_Va)*@@PI/180) - (-e.B*tap_ratio)*cos((s.PF_Va - t.PF_Va)*@@PI/180)),
        se_q = - s.SE_Vm * s.SE_Vm * (-e.B + 0.5*e.hB)  - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin((s.SE_Va - t.SE_Va)*@@PI/180) - (-e.B*tap_ratio)*cos((s.SE_Va - t.SE_Va)*@@PI/180))
			else
				e.P_TLPF = s.PF_Vm * s.PF_Vm * e.G * tap_ratio_square - s.PF_Vm * t.PF_Vm * ((e.G*tap_ratio)*cos((s.PF_Va - t.PF_Va)*@@PI/180) + (-e.B*tap_ratio)*sin((s.PF_Va - t.PF_Va)*@@PI/180)),
        se_p = s.SE_Vm * s.SE_Vm * e.G * tap_ratio_square - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*cos((s.SE_Va - t.SE_Va)*@@PI/180) + (-e.B*tap_ratio)*sin((s.SE_Va - t.SE_Va)*@@PI/180)),
				e.Q_TLPF = - s.PF_Vm * s.PF_Vm * (-e.B * tap_ratio_square + 0.5*e.hB) - s.PF_Vm * t.PF_Vm * ((e.G*tap_ratio)*sin((s.PF_Va - t.PF_Va)*@@PI/180) - (-e.B*tap_ratio)*cos((s.PF_Va - t.PF_Va)*@@PI/180)),
        se_q = - s.SE_Vm * s.SE_Vm * (-e.B * tap_ratio_square + 0.5*e.hB) - s.SE_Vm * t.SE_Vm * ((e.G*tap_ratio)*sin((s.SE_Va - t.SE_Va)*@@PI/180) - (-e.B*tap_ratio)*cos((s.SE_Va - t.SE_Va)*@@PI/180))
			end
         END,
  string Line_trans="None",
	string vio_type_se="正常",
  string vio_type_pf="正常",
	double MVA_se=0,
  double MVA_pf=0,
  int minValue = e.R.size() - 1,
        IF (minValue < 0) THEN
                minValue = 0
            END,
		      
	MVA_pf=sqrt(e.P_TLPF*e.P_TLPF+e.Q_TLPF*e.Q_TLPF),
  MVA_se=sqrt(se_p*se_p+se_q*se_q),
  //线路类型
  case when (e.flag == 0) then 
			     Line_trans="线路"
		    when (e.flag != 0) then
			     Line_trans="变压器"
			end,
  //状态估计越限
  case when (MVA_se>e.line_Q1 and MVA_se<e.line_Q2) then
	             vio_type_se="1级越限"
	        when (MVA_se>=e.line_Q2 and MVA_se<e.line_Q3) then
	             vio_type_se="2级越限"
	        when (MVA_se>=e.line_Q3) then
	             vio_type_se="3级越限"
	        end,
  //潮流越限
  case when (MVA_pf>e.line_Q1 and MVA_pf<e.line_Q2) then
	             vio_type_pf="1级越限"	
	        when (MVA_pf>=e.line_Q2 and MVA_pf<e.line_Q3) then
	             vio_type_pf="2级越限"
	        when (MVA_pf>=e.line_Q3) then
	             vio_type_pf="3级越限"
	        end,
  FOREACH i in range[0, minValue] DO
					double MVAmax1 = e.line_Q1*100/e.R.size(),
					double MVAmax2 = e.line_Q2*100/e.R.size(), 
					double MVAmax3 = e.line_Q3*100/e.R.size(),
					MVA_se = MVA_se*100/e.R.size(),
          MVA_pf = MVA_pf*100/e.R.size(),
					if(vio_type_se != "正常" and vio_type_pf != "正常") then 
               @@result+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,true,true),
           @@result_part+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,true,true)
          else if(vio_type_se == "正常" and vio_type_pf != "正常") then 
              @@result+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,false,true),
           @@result_part+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,false,true)
          else if(vio_type_se != "正常" and vio_type_pf == "正常") then 
               @@result+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,true,false),
           @@result_part+= branch_vio(e.edge_name.get(i), s.@area, Line_trans, s.Sub, s.@subid, t.Sub, t.@subid, MVAmax1, MVAmax2, MVAmax3, MVA_se,  MVA_pf, vio_type_se, vio_type_pf,s.base_kV,true,false)
          end,
          double volt = s.base_kV,
                  if volt >= 500 then
                  if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_500 += 1,
                     @@count_500_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then
                     @@count_all += 1,
                     @@count_500 += 1,
                     @@count_500_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_500 += 1,
                     @@count_500_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end
                else if volt >= 220 then
                  if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_220+=1,
                     @@count_220_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then  
                     @@count_all += 1,
                     @@count_220+=1,
                     @@count_220_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_220+=1,
                     @@count_220_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end 
                  
                else if volt >= 110 then
                  if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_110+=1,
                     @@count_110_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then  
                     @@count_all += 1,
                     @@count_110+=1,
                     @@count_110_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_110+=1,
                     @@count_110_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end                
                else if volt >= 34.5 then
                  if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_35+=1,
                     @@count_35_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then
                     @@count_all += 1,
                     @@count_35+=1,
                     @@count_35_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_35+=1,
                     @@count_35_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end     
  
                else if volt >= 10 then
                   if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_10+=1,
                     @@count_10_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then  
                     @@count_all += 1,
                     @@count_10+=1,
                     @@count_10_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_10+=1,
                     @@count_10_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end
                else
                   if(vio_type_se != "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_other+=1,
                     @@count_other_both_exceed +=1,
                     @@count_both_exceed +=1
                  else if (vio_type_se != "正常" and vio_type_pf == "正常") then  
                     @@count_all += 1,
                     @@count_other+=1,
                     @@count_other_se_exceed +=1,
                     @@count_se_exceed +=1
                  else if(vio_type_se == "正常" and vio_type_pf != "正常") then
                     @@count_all += 1,
                     @@count_other+=1,
                     @@count_other_pf_exceed +=1,
                     @@count_pf_exceed +=1
                  end
                end
    end;         
	         
    
		if return_all then
    print @@result;
  else
    print @@result_part;
  end;
  
  print @@count_all;
  
  print @@count_se_exceed;
  print @@count_pf_exceed;
  print @@count_both_exceed;
  
  
  print @@count_500;
  print @@count_500_se_exceed;
  print @@count_500_pf_exceed;
  print @@count_500_both_exceed;
  
  print @@count_220;
  print @@count_220_se_exceed;
  print @@count_220_pf_exceed;
  print @@count_220_both_exceed;
  
  
  print @@count_110;
  print @@count_110_se_exceed;
  print @@count_110_pf_exceed;
  print @@count_110_both_exceed;
  
  print @@count_35;
  print @@count_35_se_exceed;
  print @@count_35_pf_exceed;
  print @@count_35_both_exceed;
  
  print @@count_10;
  print @@count_10_se_exceed;
  print @@count_10_pf_exceed;
  print @@count_10_both_exceed;
  
  print @@count_other;
  print @@count_other_se_exceed;
  print @@count_other_pf_exceed;
  print @@count_other_both_exceed;
}